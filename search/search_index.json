{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#documentacao-pendulab","title":"Documenta\u00e7\u00e3o PenduLab","text":"<p>Esse projeto surgia do desenvolvimento de um trabalho de conclus\u00e3o de curso, intitulado, Desenvolvimento de Prot\u00f3tipo e G\u00eameo Digital como Ferramenta para um Laborat\u00f3rio Virtual com Foco em Modelagem e Controle de Sistemas Din\u00e2micos, desennvolvido na Universidade Federal do Par\u00e1 no Campus de Tucuru\u00ed, pelo discente da Faculdade de Engenharia El\u00e9trica, Os\u00e9ias Farias. </p>"},{"location":"#membros-atuais","title":"Membros Atuais \u2728","text":"<sub>Raphael Teixeira</sub>\u26a1 <sub>Os\u00e9ias Farias</sub>\u26a1"},{"location":"#demostracao-pendulab","title":"Demostra\u00e7\u00e3o Pendulab","text":"<p>"},{"location":"#_1","title":"<p>Projeto no GitHub</p>","text":""},{"location":"#ferramentas-desenvolvidas","title":"Ferramentas Desenvolvidas","text":""},{"location":"#prototipo-aeropendulo","title":"Prot\u00f3tipo Aerop\u00eandulo <p>Implementa um aerop\u00eandulo real, pode ser usado para estudos e testes de controladores e identifica\u00e7\u00e3o de sistemas etc.</p>  <p></p>","text":""},{"location":"#gemeo-digital","title":"G\u00eameo Digital <p>Usa o sinal de sa\u00edda (\u00e2ngulo) para realizar a din\u00e2mica do sinulador.</p>  <p></p>","text":""},{"location":"#interface-grafica-de-usuario","title":"Interface Gr\u00e1fica de Usu\u00e1rio <p>Usada para iteragir em tempo real com o prot\u00f3tipo, esse sistema plotado os gr\u00e1ficos da posi\u00e7\u00e3o angular, erro, sinal de refer\u00eancia, sinal PRBS e sinal de controle em malha fechada.</p>  <p></p>","text":""},{"location":"#firmware","title":"Firmware <p>Implementa o controlador, envio e recebimento de dados inteface gr\u00e1fica / microcontrolador, gera\u00e7\u00e3o de sinal de refer\u00eancia, leitura do sensor potenci\u00f4metro.</p>  <p></p>","text":""},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/","title":"Instala\u00e7\u00e3o do Python","text":"<p>O projeto precisa que voc\u00ea tenha a partir da vers\u00e3o <code>3.8</code> do Python, o Python pode ser instalado em diferentes sistemas operacionais, dessa forma, existe diferentes formas de instala-lo. A baixo \u00e9 mostrado como voc\u00ea pode instalar nos sistemas operacionais mais populares atualmente.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.1%20Instalacao_python_ubuntu/","title":"Tutorial - Instalando o Python 3.10 no Ubuntu","text":"<p>Neste tutorial, vamos guiar voc\u00ea atrav\u00e9s do processo de instala\u00e7\u00e3o do Python 3.10 no sistema operacional Ubuntu. O Python \u00e9 uma linguagem de programa\u00e7\u00e3o poderosa e vers\u00e1til, e ter a vers\u00e3o mais recente pode proporcionar acesso a recursos e melhorias mais recentes. </p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.1%20Instalacao_python_ubuntu/#passo-1-atualize-o-sistema","title":"Passo 1: Atualize o sistema","text":"<p>Antes de come\u00e7ar a instala\u00e7\u00e3o, \u00e9 sempre recomend\u00e1vel garantir que seu sistema esteja atualizado. Abra o terminal e execute os seguintes comandos:</p> <pre><code>sudo apt update\nsudo apt upgrade\n</code></pre> <p>Digite a senha de administrador quando solicitado e aguarde o t\u00e9rmino do processo.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.1%20Instalacao_python_ubuntu/#passo-2-instale-as-dependencias","title":"Passo 2: Instale as depend\u00eancias","text":"<p>O Python requer algumas depend\u00eancias que precisam ser instaladas. Execute o seguinte comando:</p> <pre><code>sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev\n</code></pre>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.1%20Instalacao_python_ubuntu/#passo-3-baixe-e-compile-o-python-310","title":"Passo 3: Baixe e compile o Python 3.10","text":"<p>Agora, voc\u00ea est\u00e1 pronto para baixar e compilar o Python 3.10. Utilizaremos o <code>wget</code> para baixar o arquivo de origem e o <code>tar</code> para descompactar. Em seguida, compilaremos e instalaremos o Python. Execute os seguintes comandos:</p> <pre><code>wget https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tgz\ntar -xf Python-3.10.0.tgz\ncd Python-3.10.0\n./configure --enable-optimizations\nmake -j$(nproc)\nsudo make altinstall\n</code></pre> <p>O processo de compila\u00e7\u00e3o pode levar algum tempo. Se ocorrerem erros durante a execu\u00e7\u00e3o do <code>make</code>, certifique-se de que todas as depend\u00eancias foram instaladas corretamente no Passo 2.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.1%20Instalacao_python_ubuntu/#passo-4-verifique-a-instalacao","title":"Passo 4: Verifique a instala\u00e7\u00e3o","text":"<p>Ap\u00f3s a conclus\u00e3o da instala\u00e7\u00e3o, verifique se o Python 3.10 foi instalado corretamente. Execute:</p> <pre><code>python3.10 --version\n</code></pre> <p>Voc\u00ea dever\u00e1 ver a vers\u00e3o do Python 3.10.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.1%20Instalacao_python_ubuntu/#conclusao","title":"Conclus\u00e3o","text":"<p>Agora, voc\u00ea tem o Python 3.10 instalado no seu sistema Ubuntu. Lembre-se de que a instala\u00e7\u00e3o manual pode ter suas vantagens, mas tamb\u00e9m significa que voc\u00ea \u00e9 respons\u00e1vel por manter as atualiza\u00e7\u00f5es do Python. Se preferir, pode optar por instalar o Python 3.10 usando ferramentas como <code>pyenv</code> ou <code>deadsnakes</code>. Certifique-se de escolher o m\u00e9todo que melhor atenda \u00e0s suas necessidades.</p> <p></p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.2%20Instalacao_python_windows/","title":"Tutorial - Instalando o Python 3.10 no Windows","text":"<p>Neste tutorial, vamos orientar voc\u00ea pelo processo de instala\u00e7\u00e3o do Python 3.10 no sistema operacional Windows. O Python \u00e9 uma linguagem de programa\u00e7\u00e3o poderosa e vers\u00e1til, e a instala\u00e7\u00e3o no Windows \u00e9 um processo relativamente simples.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.2%20Instalacao_python_windows/#passo-1-baixe-o-instalador-do-python","title":"Passo 1: Baixe o instalador do Python","text":"<p>Acesse o site oficial do Python em python.org, v\u00e1 at\u00e9 a se\u00e7\u00e3o \"Downloads\" e clique em \"View the full list of Python downloads\". Escolha a vers\u00e3o mais recente do Python 3.10 para Windows e baixe o instalador execut\u00e1vel (<code>.exe</code>).</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.2%20Instalacao_python_windows/#passo-2-execute-o-instalador","title":"Passo 2: Execute o instalador","text":"<p>Ap\u00f3s o download, execute o arquivo <code>.exe</code> que voc\u00ea baixou. Na primeira tela do instalador, certifique-se de marcar a op\u00e7\u00e3o \"Add Python 3.x to PATH\" e clique em \"Install Now\". Isso adicionar\u00e1 o Python ao seu PATH, facilitando o uso do Python a partir do prompt de comando.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.2%20Instalacao_python_windows/#passo-3-aguarde-a-instalacao","title":"Passo 3: Aguarde a instala\u00e7\u00e3o","text":"<p>O instalador come\u00e7ar\u00e1 a instalar o Python em seu sistema. Aguarde o t\u00e9rmino do processo.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.2%20Instalacao_python_windows/#passo-4-verifique-a-instalacao","title":"Passo 4: Verifique a instala\u00e7\u00e3o","text":"<p>Ap\u00f3s a conclus\u00e3o da instala\u00e7\u00e3o, abra o prompt de comando e digite:</p> <pre><code>python --version\n</code></pre> <p>Voc\u00ea dever\u00e1 ver a vers\u00e3o do Python 3.10.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.2%20Instalacao_python_windows/#passo-5-instale-o-pip-gerenciador-de-pacotes-do-python","title":"Passo 5: Instale o pip (gerenciador de pacotes do Python)","text":"<p>O pip \u00e9 uma ferramenta essencial para instalar pacotes Python. Certifique-se de que o pip est\u00e1 instalado executando o seguinte comando no prompt de comando:</p> <pre><code>python -m ensurepip --default-pip\n</code></pre>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.2%20Instalacao_python_windows/#conclusao","title":"Conclus\u00e3o","text":"<p>Agora voc\u00ea tem o Python 3.10 instalado no seu sistema Windows. Voc\u00ea pode come\u00e7ar a criar e executar seus scripts Python. Lembre-se de que o Python 3.10 inclui o pip, ent\u00e3o voc\u00ea pode usar o pip para instalar pacotes adicionais conforme necess\u00e1rio para seus projetos.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.3%20Instalacao_python_macos/","title":"Tutorial - Instalando o Python 3.10 no macOS","text":"<p>Neste tutorial, vamos guiar voc\u00ea pelo processo de instala\u00e7\u00e3o do Python 3.10 no sistema operacional macOS. O Python \u00e9 uma linguagem de programa\u00e7\u00e3o poderosa e vers\u00e1til, e a instala\u00e7\u00e3o no macOS \u00e9 relativamente simples.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.3%20Instalacao_python_macos/#passo-1-verifique-a-versao-do-macos","title":"Passo 1: Verifique a vers\u00e3o do macOS","text":"<p>Certifique-se de estar usando pelo menos o macOS 10.9 (Mavericks) ou posterior, pois as vers\u00f5es mais antigas podem ter complica\u00e7\u00f5es durante a instala\u00e7\u00e3o.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.3%20Instalacao_python_macos/#passo-2-instale-o-homebrew-se-ainda-nao-estiver-instalado","title":"Passo 2: Instale o Homebrew (se ainda n\u00e3o estiver instalado)","text":"<p>O Homebrew \u00e9 um gerenciador de pacotes que facilita a instala\u00e7\u00e3o de software no macOS. Abra o Terminal e execute o seguinte comando para instalar o Homebrew:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>Siga as instru\u00e7\u00f5es que aparecem no Terminal para concluir a instala\u00e7\u00e3o.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.3%20Instalacao_python_macos/#passo-3-instale-o-python-310-com-o-homebrew","title":"Passo 3: Instale o Python 3.10 com o Homebrew","text":"<p>Agora que o Homebrew est\u00e1 instalado, use-o para instalar o Python 3.10. No Terminal, execute os seguintes comandos:</p> <pre><code>brew update\nbrew install python@3.10\n</code></pre>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.3%20Instalacao_python_macos/#passo-4-adicione-o-python-ao-path","title":"Passo 4: Adicione o Python ao PATH","text":"<p>Adicione o Python 3.10 ao seu PATH executando o seguinte comando:</p> <pre><code>echo 'export PATH=\"/usr/local/opt/python@3.10/bin:$PATH\"' &gt;&gt; ~/.zshrc\n</code></pre> <p>Se voc\u00ea estiver usando o Bash, substitua <code>~/.zshrc</code> por <code>~/.bash_profile</code>.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.3%20Instalacao_python_macos/#passo-5-verifique-a-instalacao","title":"Passo 5: Verifique a instala\u00e7\u00e3o","text":"<p>Feche e reabra o Terminal e digite o seguinte comando para verificar se o Python 3.10 foi instalado corretamente:</p> <pre><code>python3.10 --version\n</code></pre> <p>Voc\u00ea dever\u00e1 ver a vers\u00e3o do Python 3.10.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.1%20Instalacao_python/1.3%20Instalacao_python_macos/#conclusao","title":"Conclus\u00e3o","text":"<p>Agora voc\u00ea tem o Python 3.10 instalado no seu sistema macOS. Pode come\u00e7ar a desenvolver e executar seus scripts Python. Lembre-se de que o Python 3.10 inclui o pip, ent\u00e3o voc\u00ea pode usar o pip para instalar pacotes adicionais conforme necess\u00e1rio para seus projetos.</p> <p></p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.2%20Instalacao_dependencias_python/1.2%20Instalacao_dependencias_python/","title":"Instala\u00e7\u00e3o das Depend\u00eancias do Python","text":""},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.2%20Instalacao_dependencias_python/1.2%20Instalacao_dependencias_python/#tutorial-instalando-dependencias-do-python-a-partir-do-arquivo-requirementstxt","title":"Tutorial: Instalando Depend\u00eancias do Python a partir do arquivo requirements.txt","text":"<p>Quando trabalhamos em projetos Python, \u00e9 comum listar todas as depend\u00eancias necess\u00e1rias em um arquivo chamado <code>requirements.txt</code>. Este tutorial mostrar\u00e1 como instalar essas depend\u00eancias utilizando o <code>pip</code>.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.2%20Instalacao_dependencias_python/1.2%20Instalacao_dependencias_python/#instalacao-a-partir-do-requirementstxt","title":"Instala\u00e7\u00e3o a partir do requirements.txt","text":"<ol> <li> <p>Abra o Terminal ou Prompt de Comando no seu sistema operacional.</p> </li> <li> <p>Navegue at\u00e9 o diret\u00f3rio do seu projeto usando o comando <code>cd</code>. Por exemplo:</p> <pre><code>cd /caminho/do/seu/projeto\n</code></pre> </li> <li> <p>Execute o seguinte comando para instalar as depend\u00eancias listadas no <code>requirements.txt</code>:</p> <pre><code>pip install -r requirements.txt\n</code></pre> </li> </ol> <p>Este comando instrui o <code>pip</code> a ler o arquivo <code>requirements.txt</code> e instalar todas as depend\u00eancias listadas com as vers\u00f5es especificadas.</p> <ol> <li> <p>Ap\u00f3s a execu\u00e7\u00e3o bem-sucedida do comando, todas as depend\u00eancias do seu projeto ser\u00e3o instaladas.</p> </li> <li> <p>Para verificar as depend\u00eancias instaladas, voc\u00ea pode executar:</p> <pre><code>pip freeze\n</code></pre> </li> </ol> <p>Isso exibir\u00e1 uma lista das depend\u00eancias instaladas, incluindo suas vers\u00f5es.</p>"},{"location":"1%20Instala%C3%A7%C3%B5es%20e%20Configura%C3%A7%C3%B5es/1.2%20Instalacao_dependencias_python/1.2%20Instalacao_dependencias_python/#conclusao","title":"Conclus\u00e3o","text":"<p>Agora, voc\u00ea instalou com sucesso as depend\u00eancias do seu projeto Python a partir do arquivo <code>requirements.txt</code>. Certifique-se de compartilhar e manter atualizado esse arquivo conforme necess\u00e1rio para garantir que todos no seu projeto estejam usando as mesmas vers\u00f5es das bibliotecas. Este \u00e9 um passo importante para garantir a consist\u00eancia do ambiente de desenvolvimento entre membros da equipe e ao implantar seu aplicativo em diferentes ambientes.</p>"},{"location":"Componentes%20do%20Pendulab/aeropendulo_doc/","title":"Desenvolvimento do Prot\u00f3tipo","text":"<p> <p></p> <p> Universidade Federal do Par\u00e1 Campus Universit\u00e1rio de Tucuru\u00ed Faculdade de Engenharia El\u00e9trica </p> <p></p> <p> <p>Figura 1 - Prot\u00f3tipo do Aerop\u00eandulo.</p> <p></p> <p></p>"},{"location":"Componentes%20do%20Pendulab/aeropendulo_doc/#em-desenolvimento","title":"EM DESENOLVIMENTO ...","text":""},{"location":"Componentes%20do%20Pendulab/gemeo_digital/","title":"G\u00eameo Digital","text":"<p> <p></p> <p> Universidade Federal do Par\u00e1 Campus Universit\u00e1rio de Tucuru\u00ed Faculdade de Engenharia El\u00e9trica </p> <p></p> <p> <p>Figura 1 - G\u00eameo Digital.</p> <p></p> <p></p>"},{"location":"Componentes%20do%20Pendulab/gemeo_digital/#em-desenolvimento","title":"EM DESENOLVIMENTO ...","text":""},{"location":"Componentes%20do%20Pendulab/interface_grafica_usuario/","title":"Interface Gr\u00e1fica de Usu\u00e1rio","text":"<p> <p></p> <p> Universidade Federal do Par\u00e1 Campus Universit\u00e1rio de Tucuru\u00ed Faculdade de Engenharia El\u00e9trica </p> <p></p> <p> <p>Figura 1 - Interface Gr\u00e1fica de Usu\u00e1rio.</p> <p></p> <p></p>"},{"location":"Componentes%20do%20Pendulab/interface_grafica_usuario/#em-desenolvimento","title":"EM DESENOLVIMENTO ...","text":""},{"location":"M%C3%B3dulo%20Firmware/aeropendulo_doc/","title":"Desenvolvimento do Firmaware para ESP32","text":"<p> <p></p> <p> Universidade Federal do Par\u00e1 Campus Universit\u00e1rio de Tucuru\u00ed Faculdade de Engenharia El\u00e9trica </p> <p></p> <p> <p>Figura 1 - Diagrama de blocos do Sistema em Malha Fechada.</p> <p></p> <p></p>"},{"location":"M%C3%B3dulo%20Firmware/aeropendulo_doc/#em-desenolvimento","title":"EM DESENOLVIMENTO ...","text":""},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/animacao_aeropendulo_reference/","title":"Docs M\u00f3dulo animacao_aeropendulo","text":""},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/animacao_aeropendulo_reference/#softwares_aeropendulo.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo","title":"<code>softwares_aeropendulo.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo</code>","text":"<p>             Bases: <code>AnimacaoAeropenduloInterface</code></p> <p>Classe que implementa a amina\u00e7\u00e3o do Aerop\u00eandulo.</p> Atributo <p>comprimento_braco: tamanho do bra\u00e7o do Aerop\u00eandulo.</p> Source code in <code>softwares_aeropendulo/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>class AnimacaoAeropendulo(AnimacaoAeropenduloInterface):\n    \"\"\"\n    Classe que implementa a amina\u00e7\u00e3o do Aerop\u00eandulo.\n\n    Atributo:\n        comprimento_braco: tamanho do bra\u00e7o do Aerop\u00eandulo.\n    \"\"\"\n    def __init__(self, comprimento_braco=4.4) -&gt; None:\n        # Par\u00e2metros do Aerop\u00eandulo\n        self.comprimento_braco = comprimento_braco\n        self.scene = vp.canvas(title=\"&lt;center&gt;&lt;h1&gt;Aerop\u00eandulo&lt;/h1&gt;&lt;center/&gt;\",\n                               width=650,\n                               height=580, align=\"left\", autoscale=0, range=5,\n                               center=vp.vec(0, 3, 0),\n                               background=vp.vector(1.7, 0.7, 0.9),\n                               color=vp.vec(1, 0.6, 0.6),\n                               forward=vp.vec(-0.3, 0, -1))\n        self.scene.range = 6\n        # chamando a fun\u00e7\u00e3o para criar a amina\u00e7\u00e3o gr\u00e1fica do Aerop\u00eandulo.\n        self.aeropendulo = self.__aminacao()\n        self.__helice()\n\n    def __aminacao(self) -&gt; vp.compound:\n        \"\"\"\n        Classe que implementa o Aerop\u00eandulo.\n\n        Args:\n            comprimento_braco: tamanho do bra\u00e7o do Aerop\u00eandulo.\n        Returns:\n            Retorna um objeto (vpython) que cont\u00eam a estrutura do Aerop\u00eandulo.\n        \"\"\"\n        self.base = vp.box(pos=vp.vec(0, -0.85, 0), size=vp.vec(30, 0.2, 15),\n                           texture=vp.textures.wood)\n        self.parede = vp.box(pos=vp.vec(0, 7.1, -7.55),\n                             size=vp.vec(30, 16, 0.2),\n                             color=vp.vec(0.1, 0.1, 0.1), shininess=0.01)\n        self.sitio = vp.text(pos=vp.vec(0, 8.1, -7.45),\n                             text=\"AEROP\u00caNDULO\", color=vp.vec(1, 0.6, 0.6),\n                             align='center', depth=0)\n\n        self.__desenhar_pendulo()\n\n        # Eixo de sustenta\u00e7\u00e3o.\n        self.eixo = vp.cylinder(pos=vp.vec(0, 5.2, 0.3), radius=0.09,\n                                axis=vp.vec(0, 0, -2),\n                                color=vp.vec(0.7, 0.4, 0.1))\n\n        # Estrutura de sustenta\u00e7\u00e3o do aerop\u00eandulo.\n        self.b1 = vp.box(pos=vp.vec(0, 1.7, -2), size=vp.vec(3, 8, 0.6),\n                         color=vp.vec(0.8, 0.8, 0.8))\n\n        self.b2 = vp.box(pos=vp.vec(0, -0.6, -1.5), size=vp.vec(4.5, 0.4, 2.5),\n                         color=vp.vec(0.8, 0.8, 0.8))\n\n        self.logo = vp.box(pos=vp.vec(0, 2.5, -1.799),\n                           texture=\"https://i.imgur.com/D2xnkpF.png\",\n                           size=vp.vec(2, 2, 0.2))\n\n        self.ufpa = vp.text(pos=vp.vec(0, 3.7, -1.7), text=\"UFPA\",\n                            color=vp.vec(1, 0.6, 0.6), height=0.5,\n                            align='center', depth=0)\n\n        return self.pendulo\n\n    def __helice(self) -&gt; None:\n        self.helice = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                             size=vp.vec(0.05, 0.2, 2),\n                             color=vp.vec(1, 1, 0))\n\n        self.helice1 = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                              size=vp.vec(0.05, 0.2, 2),\n                              color=vp.vec(1, 1, 0))\n        self.helice1.axis = self.pendulo.axis\n        self.helice1.size = vp.vec(0.05, 0.2, 2)\n        self.helice1.rotate(axis=vp.vec(1, 0, 0),\n                            angle=vp.pi/4)\n\n        self.helice2 = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                              size=vp.vec(0.05, 0.2, 2),\n                              color=vp.vec(1, 1, 0))\n        self.helice2.axis = self.pendulo.axis\n        self.helice2.size = vp.vec(0.05, 0.2, 2)\n        self.helice2.rotate(axis=vp.vec(1, 0, 0),\n                            angle=vp.pi/2)\n\n        self.helice3 = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                              size=vp.vec(0.05, 0.2, 2),\n                              color=vp.vec(1, 1, 0))\n        self.helice3.axis = self.pendulo.axis\n        self.helice3.size = vp.vec(0.05, 0.2, 2)\n        self.helice3.rotate(axis=vp.vec(1, 0, 0),\n                            angle=3*vp.pi/4.)\n        self.helice1.visible = False\n        self.helice2.visible = False\n        self.helice3.visible = False\n\n    def pause_giro(self) -&gt; None:\n        self.helice1.visible = True\n        self.helice2.visible = True\n        self.helice3.visible = True\n\n    def girar_helice(self) -&gt; None:\n        self.helice1.visible = False\n        self.helice2.visible = False\n        self.helice3.visible = False\n\n    def set_posicao_helice(self, angle):\n        self.helice.rotate(axis=vp.vec(0, 0, 1),\n                           angle=angle,\n                           origin=vp.vec(0, 5.2, 0))\n        self.helice.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice1.rotate(axis=vp.vec(0, 0, 1),\n                            angle=angle,\n                            origin=vp.vec(0, 5.2, 0))\n        self.helice1.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice2.rotate(axis=vp.vec(0, 0, 1),\n                            angle=angle,\n                            origin=vp.vec(0, 5.2, 0))\n        self.helice2.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice3.rotate(axis=vp.vec(0, 0, 1),\n                            angle=angle,\n                            origin=vp.vec(0, 5.2, 0))\n        self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n    def update_helice(self, angle, ts) -&gt; None:\n\n        self.helice.size = vp.vec(0.05, 0.2, 2)\n        self.helice1.size = vp.vec(0.05, 0.2, 2)\n        self.helice2.size = vp.vec(0.05, 0.2, 2)\n        self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice.axis = self.pendulo.axis\n        self.helice.size = vp.vec(0.05, 0.2, 2)\n        self.helice1.axis = self.pendulo.axis\n        self.helice1.size = vp.vec(0.05, 0.2, 2)\n        self.helice2.axis = self.pendulo.axis\n        self.helice2.size = vp.vec(0.05, 0.2, 2)\n        self.helice3.axis = self.pendulo.axis\n        self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice.rotate(axis=vp.vec(0, 0, 1),\n                           angle=angle*ts,\n                           origin=vp.vec(0, 5.2, 0))\n        self.helice.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice1.rotate(axis=vp.vec(0, 0, 1),\n                            angle=angle*ts,\n                            origin=vp.vec(0, 5.2, 0))\n        self.helice1.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice2.rotate(axis=vp.vec(0, 0, 1),\n                            angle=angle*ts,\n                            origin=vp.vec(0, 5.2, 0))\n        self.helice2.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice3.rotate(axis=vp.vec(0, 0, 1),\n                            angle=angle*ts,\n                            origin=vp.vec(0, 5.2, 0))\n        self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n        # obs tentando ajustar o diro das h\u00e9lices apenas para um lado ....\n        # if x[1] + interface.valor_angle &lt; np.pi/2:\n        #     ag = 0.3\n        # else:\n        #     ag = -0.8\n\n        self.helice.rotate(axis=vp.vec(1, 0,  0), angle=0.09)\n        self.helice1.rotate(axis=vp.vec(1, 0, 0), angle=0.09)\n        self.helice2.rotate(axis=vp.vec(1, 0, 0), angle=0.09)\n        self.helice3.rotate(axis=vp.vec(1, 0, 0), angle=0.09)\n\n    def __desenhar_pendulo(self) -&gt; None:\n        # Bra\u00e7o do Aerop\u00eandulo.\n        self.barra = vp.box(pos=vp.vec(0, -1.4, 0),\n                            size=vp.vec(0.2, self.comprimento_braco, 0.2),\n                            color=vp.vec(0.5, 0.5, 0.95))\n\n        # Base que acopla o motor ao bra\u00e7o.\n        self.base_motor = vp.cylinder(pos=vp.vec(-0.2, -4, 0), radius=0.4,\n                                      axis=vp.vec(0.4, 0, 0),\n                                      color=vp.vec(0.5, 0.5, 0.95))\n        # Armadura do motor.\n        self.base2_motor = vp.box(pos=vp.vec(0.4, -4, 0),\n                                  size=vp.vec(0.4, 0.4, 0.4),\n                                  color=vp.vec(1, 1, 0))\n\n        # Eixo que da h\u00e9lice do motor\n        self.base_helice = vp.cylinder(pos=vp.vec(0.4, -4, 0), radius=0.05,\n                                       axis=vp.vec(0.4, 0, 0),\n                                       color=vp.vec(0.5, 0.5, 0.8))\n\n        # Motor completo.\n        self.motor = vp.compound([self.base_motor,\n                                  self.base2_motor,\n                                  self.base_helice])\n\n        # Aerop\u00eandulo\n        self.pendulo = vp.compound([self.barra, self.motor])\n        self.pendulo.pos = vp.vec(0.31, 2.7, 0)\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/animacao_aeropendulo_reference/#softwares_aeropendulo.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.__aminacao","title":"<code>__aminacao()</code>","text":"<p>Classe que implementa o Aerop\u00eandulo.</p> <p>Parameters:</p> Name Type Description Default <code>comprimento_braco</code> <p>tamanho do bra\u00e7o do Aerop\u00eandulo.</p> required <p>Returns:     Retorna um objeto (vpython) que cont\u00eam a estrutura do Aerop\u00eandulo.</p> Source code in <code>softwares_aeropendulo/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def __aminacao(self) -&gt; vp.compound:\n    \"\"\"\n    Classe que implementa o Aerop\u00eandulo.\n\n    Args:\n        comprimento_braco: tamanho do bra\u00e7o do Aerop\u00eandulo.\n    Returns:\n        Retorna um objeto (vpython) que cont\u00eam a estrutura do Aerop\u00eandulo.\n    \"\"\"\n    self.base = vp.box(pos=vp.vec(0, -0.85, 0), size=vp.vec(30, 0.2, 15),\n                       texture=vp.textures.wood)\n    self.parede = vp.box(pos=vp.vec(0, 7.1, -7.55),\n                         size=vp.vec(30, 16, 0.2),\n                         color=vp.vec(0.1, 0.1, 0.1), shininess=0.01)\n    self.sitio = vp.text(pos=vp.vec(0, 8.1, -7.45),\n                         text=\"AEROP\u00caNDULO\", color=vp.vec(1, 0.6, 0.6),\n                         align='center', depth=0)\n\n    self.__desenhar_pendulo()\n\n    # Eixo de sustenta\u00e7\u00e3o.\n    self.eixo = vp.cylinder(pos=vp.vec(0, 5.2, 0.3), radius=0.09,\n                            axis=vp.vec(0, 0, -2),\n                            color=vp.vec(0.7, 0.4, 0.1))\n\n    # Estrutura de sustenta\u00e7\u00e3o do aerop\u00eandulo.\n    self.b1 = vp.box(pos=vp.vec(0, 1.7, -2), size=vp.vec(3, 8, 0.6),\n                     color=vp.vec(0.8, 0.8, 0.8))\n\n    self.b2 = vp.box(pos=vp.vec(0, -0.6, -1.5), size=vp.vec(4.5, 0.4, 2.5),\n                     color=vp.vec(0.8, 0.8, 0.8))\n\n    self.logo = vp.box(pos=vp.vec(0, 2.5, -1.799),\n                       texture=\"https://i.imgur.com/D2xnkpF.png\",\n                       size=vp.vec(2, 2, 0.2))\n\n    self.ufpa = vp.text(pos=vp.vec(0, 3.7, -1.7), text=\"UFPA\",\n                        color=vp.vec(1, 0.6, 0.6), height=0.5,\n                        align='center', depth=0)\n\n    return self.pendulo\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/animacao_aeropendulo_reference/#softwares_aeropendulo.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.__helice","title":"<code>__helice()</code>","text":"Source code in <code>softwares_aeropendulo/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def __helice(self) -&gt; None:\n    self.helice = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                         size=vp.vec(0.05, 0.2, 2),\n                         color=vp.vec(1, 1, 0))\n\n    self.helice1 = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                          size=vp.vec(0.05, 0.2, 2),\n                          color=vp.vec(1, 1, 0))\n    self.helice1.axis = self.pendulo.axis\n    self.helice1.size = vp.vec(0.05, 0.2, 2)\n    self.helice1.rotate(axis=vp.vec(1, 0, 0),\n                        angle=vp.pi/4)\n\n    self.helice2 = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                          size=vp.vec(0.05, 0.2, 2),\n                          color=vp.vec(1, 1, 0))\n    self.helice2.axis = self.pendulo.axis\n    self.helice2.size = vp.vec(0.05, 0.2, 2)\n    self.helice2.rotate(axis=vp.vec(1, 0, 0),\n                        angle=vp.pi/2)\n\n    self.helice3 = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                          size=vp.vec(0.05, 0.2, 2),\n                          color=vp.vec(1, 1, 0))\n    self.helice3.axis = self.pendulo.axis\n    self.helice3.size = vp.vec(0.05, 0.2, 2)\n    self.helice3.rotate(axis=vp.vec(1, 0, 0),\n                        angle=3*vp.pi/4.)\n    self.helice1.visible = False\n    self.helice2.visible = False\n    self.helice3.visible = False\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/animacao_aeropendulo_reference/#softwares_aeropendulo.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.pause_giro","title":"<code>pause_giro()</code>","text":"Source code in <code>softwares_aeropendulo/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def pause_giro(self) -&gt; None:\n    self.helice1.visible = True\n    self.helice2.visible = True\n    self.helice3.visible = True\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/animacao_aeropendulo_reference/#softwares_aeropendulo.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.girar_helice","title":"<code>girar_helice()</code>","text":"Source code in <code>softwares_aeropendulo/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def girar_helice(self) -&gt; None:\n    self.helice1.visible = False\n    self.helice2.visible = False\n    self.helice3.visible = False\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/animacao_aeropendulo_reference/#softwares_aeropendulo.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.set_posicao_helice","title":"<code>set_posicao_helice(angle)</code>","text":"Source code in <code>softwares_aeropendulo/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def set_posicao_helice(self, angle):\n    self.helice.rotate(axis=vp.vec(0, 0, 1),\n                       angle=angle,\n                       origin=vp.vec(0, 5.2, 0))\n    self.helice.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice1.rotate(axis=vp.vec(0, 0, 1),\n                        angle=angle,\n                        origin=vp.vec(0, 5.2, 0))\n    self.helice1.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice2.rotate(axis=vp.vec(0, 0, 1),\n                        angle=angle,\n                        origin=vp.vec(0, 5.2, 0))\n    self.helice2.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice3.rotate(axis=vp.vec(0, 0, 1),\n                        angle=angle,\n                        origin=vp.vec(0, 5.2, 0))\n    self.helice3.size = vp.vec(0.05, 0.2, 2)\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/animacao_aeropendulo_reference/#softwares_aeropendulo.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.update_helice","title":"<code>update_helice(angle, ts)</code>","text":"Source code in <code>softwares_aeropendulo/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def update_helice(self, angle, ts) -&gt; None:\n\n    self.helice.size = vp.vec(0.05, 0.2, 2)\n    self.helice1.size = vp.vec(0.05, 0.2, 2)\n    self.helice2.size = vp.vec(0.05, 0.2, 2)\n    self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice.axis = self.pendulo.axis\n    self.helice.size = vp.vec(0.05, 0.2, 2)\n    self.helice1.axis = self.pendulo.axis\n    self.helice1.size = vp.vec(0.05, 0.2, 2)\n    self.helice2.axis = self.pendulo.axis\n    self.helice2.size = vp.vec(0.05, 0.2, 2)\n    self.helice3.axis = self.pendulo.axis\n    self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice.rotate(axis=vp.vec(0, 0, 1),\n                       angle=angle*ts,\n                       origin=vp.vec(0, 5.2, 0))\n    self.helice.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice1.rotate(axis=vp.vec(0, 0, 1),\n                        angle=angle*ts,\n                        origin=vp.vec(0, 5.2, 0))\n    self.helice1.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice2.rotate(axis=vp.vec(0, 0, 1),\n                        angle=angle*ts,\n                        origin=vp.vec(0, 5.2, 0))\n    self.helice2.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice3.rotate(axis=vp.vec(0, 0, 1),\n                        angle=angle*ts,\n                        origin=vp.vec(0, 5.2, 0))\n    self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n    # obs tentando ajustar o diro das h\u00e9lices apenas para um lado ....\n    # if x[1] + interface.valor_angle &lt; np.pi/2:\n    #     ag = 0.3\n    # else:\n    #     ag = -0.8\n\n    self.helice.rotate(axis=vp.vec(1, 0,  0), angle=0.09)\n    self.helice1.rotate(axis=vp.vec(1, 0, 0), angle=0.09)\n    self.helice2.rotate(axis=vp.vec(1, 0, 0), angle=0.09)\n    self.helice3.rotate(axis=vp.vec(1, 0, 0), angle=0.09)\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/animacao_aeropendulo_reference/#softwares_aeropendulo.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.__desenhar_pendulo","title":"<code>__desenhar_pendulo()</code>","text":"Source code in <code>softwares_aeropendulo/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def __desenhar_pendulo(self) -&gt; None:\n    # Bra\u00e7o do Aerop\u00eandulo.\n    self.barra = vp.box(pos=vp.vec(0, -1.4, 0),\n                        size=vp.vec(0.2, self.comprimento_braco, 0.2),\n                        color=vp.vec(0.5, 0.5, 0.95))\n\n    # Base que acopla o motor ao bra\u00e7o.\n    self.base_motor = vp.cylinder(pos=vp.vec(-0.2, -4, 0), radius=0.4,\n                                  axis=vp.vec(0.4, 0, 0),\n                                  color=vp.vec(0.5, 0.5, 0.95))\n    # Armadura do motor.\n    self.base2_motor = vp.box(pos=vp.vec(0.4, -4, 0),\n                              size=vp.vec(0.4, 0.4, 0.4),\n                              color=vp.vec(1, 1, 0))\n\n    # Eixo que da h\u00e9lice do motor\n    self.base_helice = vp.cylinder(pos=vp.vec(0.4, -4, 0), radius=0.05,\n                                   axis=vp.vec(0.4, 0, 0),\n                                   color=vp.vec(0.5, 0.5, 0.8))\n\n    # Motor completo.\n    self.motor = vp.compound([self.base_motor,\n                              self.base2_motor,\n                              self.base_helice])\n\n    # Aerop\u00eandulo\n    self.pendulo = vp.compound([self.barra, self.motor])\n    self.pendulo.pos = vp.vec(0.31, 2.7, 0)\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/graficos_aeropendulo_reference/","title":"Docs M\u00f3dulo graficos_aeropendulo","text":""},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/graficos_aeropendulo_reference/#softwares_aeropendulo.simulador_aeropendulo.graficos_aeropendulo.Graficos","title":"<code>softwares_aeropendulo.simulador_aeropendulo.graficos_aeropendulo.Graficos</code>","text":"<p>             Bases: <code>GraficosInterface</code></p> <p>Gr\u00e1fico para plotagem dos dados dos estados do Aerop\u00e9ndulo.</p> Source code in <code>softwares_aeropendulo/simulador_aeropendulo/graficos_aeropendulo.py</code> <pre><code>class Graficos(GraficosInterface):\n    \"\"\"\n    Gr\u00e1fico para plotagem dos dados dos estados do Aerop\u00e9ndulo.\n    \"\"\"\n    def __init__(self, largura: int = 650, altura: int = 400):\n        self.width = largura\n        self.height = altura\n\n    def graficos(self) -&gt; Tuple:\n        \"\"\"\n        M\u00e9todo que cria os Gr\u00e1fico.\n\n        Returns:\n            Retorna uma tupla contendo o objeto do gr\u00e1fico e da curvas.\n        \"\"\"\n        titulo = \"Gr\u00e1ficos dos estados do Aerop\u00eandulo\"\n        self.grafico = vp.graph(title=titulo, align=\"right\",\n                                xtitle='tempo (s)', fast=True,\n                                width=self.width, height=self.height,\n                                center=vp.vector(0, 12, 0), scroll=True,\n                                xmin=0, xmax=14, ymin=-3, ymax=70, dot=True,\n                                background=vp.vector(0.95, 0.95, 0.95))\n\n        self.curva1 = vp.gcurve(color=vp.color.blue, width=3,\n                                markers=False, label=\"Posi\u00e7\u00e3o Angular (Graus)\",\n                                dot=True, dot_color=vp.color.blue)\n\n        self.curva2 = vp.gcurve(color=vp.color.black, width=3, markers=False,\n                                label=\"Refer\u00eancia Angular(Graus)\", dot=True,\n                                dot_color=vp.color.black)\n\n        # self.curva3 = vp.gcurve(color=vp.color.red, width=3, markers=False,\n        #                         label=\"Velocidade Angular (rad/s)\", dot=True,\n        #                         dot_color=vp.color.red)\n\n        # self.curva4 = vp.gcurve(color=vp.color.orange, width=3,markers=False,\n        #                         label=\"Sinal de Controle (V)\", dot=True,\n        #                         dot_color=vp.color.orange)\n\n        return self.grafico, self.curva1, self.curva2\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/graficos_aeropendulo_reference/#softwares_aeropendulo.simulador_aeropendulo.graficos_aeropendulo.Graficos.graficos","title":"<code>graficos()</code>","text":"<p>M\u00e9todo que cria os Gr\u00e1fico.</p> <p>Returns:</p> Type Description <code>Tuple</code> <p>Retorna uma tupla contendo o objeto do gr\u00e1fico e da curvas.</p> Source code in <code>softwares_aeropendulo/simulador_aeropendulo/graficos_aeropendulo.py</code> <pre><code>def graficos(self) -&gt; Tuple:\n    \"\"\"\n    M\u00e9todo que cria os Gr\u00e1fico.\n\n    Returns:\n        Retorna uma tupla contendo o objeto do gr\u00e1fico e da curvas.\n    \"\"\"\n    titulo = \"Gr\u00e1ficos dos estados do Aerop\u00eandulo\"\n    self.grafico = vp.graph(title=titulo, align=\"right\",\n                            xtitle='tempo (s)', fast=True,\n                            width=self.width, height=self.height,\n                            center=vp.vector(0, 12, 0), scroll=True,\n                            xmin=0, xmax=14, ymin=-3, ymax=70, dot=True,\n                            background=vp.vector(0.95, 0.95, 0.95))\n\n    self.curva1 = vp.gcurve(color=vp.color.blue, width=3,\n                            markers=False, label=\"Posi\u00e7\u00e3o Angular (Graus)\",\n                            dot=True, dot_color=vp.color.blue)\n\n    self.curva2 = vp.gcurve(color=vp.color.black, width=3, markers=False,\n                            label=\"Refer\u00eancia Angular(Graus)\", dot=True,\n                            dot_color=vp.color.black)\n\n    # self.curva3 = vp.gcurve(color=vp.color.red, width=3, markers=False,\n    #                         label=\"Velocidade Angular (rad/s)\", dot=True,\n    #                         dot_color=vp.color.red)\n\n    # self.curva4 = vp.gcurve(color=vp.color.orange, width=3,markers=False,\n    #                         label=\"Sinal de Controle (V)\", dot=True,\n    #                         dot_color=vp.color.orange)\n\n    return self.grafico, self.curva1, self.curva2\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/interface_interativa_reference/","title":"Docs M\u00f3dulo interface_interativa","text":""},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/interface_interativa_reference/#softwares_aeropendulo.simulador_aeropendulo.interface_interativa.Interface","title":"<code>softwares_aeropendulo.simulador_aeropendulo.interface_interativa.Interface</code>","text":"<p>Classe que implementa a interface interativa do simulador do Aerop\u00eandulo.</p> Atributo <p>animacao_aeropendulo: Inst\u00e2ncia da classe AnimacaoAeropendulo. controlador: Inst\u00e2ncia da classe AnimacaoAeropendulo.</p> Source code in <code>softwares_aeropendulo/simulador_aeropendulo/interface_interativa.py</code> <pre><code>class Interface:\n    \"\"\"\n    Classe que implementa a interface interativa do simulador do Aerop\u00eandulo.\n\n    Atributo:\n        animacao_aeropendulo: Inst\u00e2ncia da classe AnimacaoAeropendulo.\n        controlador: Inst\u00e2ncia da classe AnimacaoAeropendulo.\n    \"\"\"\n    def __init__(self, animacao_aeropendulo, controlador) -&gt; None:\n        self.EXE = False\n        self.valor_angle = 0.0\n        self.controlador = controlador\n        self.animacao_aeropendulo = animacao_aeropendulo\n        self.scene = animacao_aeropendulo.scene\n\n        # Criando a interface\n        self.__criar_interface()\n\n    def __executar(self, b) -&gt; None:\n        if self.EXE:\n            self.animacao_aeropendulo.girar_helice()\n            b.text = \"Executar\"\n        else:\n            b.text = \"Pausar\"\n            self.animacao_aeropendulo.pause_giro()\n        self.EXE = not self.EXE\n\n    def rotate(self, angle) -&gt; None:\n        self.valor_angle = (angle.number)*(vp.pi/180.0)\n        self.animacao_aeropendulo.aeropendulo.rotate(axis=vp.vec(0, 0, 1),\n                                                     angle=self.valor_angle,\n                                                     origin=vp.vec(0, 5.2, 0))\n        self.animacao_aeropendulo.set_posicao_helice(self.valor_angle)\n\n    def __slide_angle_referencia(self, valor) -&gt; None:\n        self.controlador.r = valor.value\n        print(valor.value)\n\n    def __criar_interface(self) -&gt; None:\n        self.scene.append_to_caption(\n            \"\\tMenu Interativo Aerop\u00eandulo\\n\")\n        self.scene.append_to_caption(\"\\n\\t \")\n        self.buttom_exe = vp.button(bind=self.__executar,\n                                    text=\"Excecutar\",\n                                    color=vp.color.white,\n                                    background=vp.color.red,\n                                    width=100, _height=40)\n        self.scene.append_to_caption(\"\\t\\t\")\n        self.scene.append_to_caption(\n            \"Posi\u00e7\u00e3o Inicial\\t\")\n        vp.winput(bind=self.rotate, prompt=\"Rotate: \", type=\"numeric\",\n                  width=100, _height=40)\n        vp.wtext(text=\" Graus\")\n        self.scene.append_to_caption('\\n')\n\n        self.scene.append_to_caption(\"\\n\\n\\t\")\n        self.scene.append_to_caption(\"Refer\u00eancia : \")\n        vp.slider(bind=self.__slide_angle_referencia, min=0, max=2,\n                  step=0.001, value=0)\n        self.scene.append_to_caption(\"\\n\\n\")\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/interface_interativa_reference/#softwares_aeropendulo.simulador_aeropendulo.interface_interativa.Interface.__executar","title":"<code>__executar(b)</code>","text":"Source code in <code>softwares_aeropendulo/simulador_aeropendulo/interface_interativa.py</code> <pre><code>def __executar(self, b) -&gt; None:\n    if self.EXE:\n        self.animacao_aeropendulo.girar_helice()\n        b.text = \"Executar\"\n    else:\n        b.text = \"Pausar\"\n        self.animacao_aeropendulo.pause_giro()\n    self.EXE = not self.EXE\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/interface_interativa_reference/#softwares_aeropendulo.simulador_aeropendulo.interface_interativa.Interface.rotate","title":"<code>rotate(angle)</code>","text":"Source code in <code>softwares_aeropendulo/simulador_aeropendulo/interface_interativa.py</code> <pre><code>def rotate(self, angle) -&gt; None:\n    self.valor_angle = (angle.number)*(vp.pi/180.0)\n    self.animacao_aeropendulo.aeropendulo.rotate(axis=vp.vec(0, 0, 1),\n                                                 angle=self.valor_angle,\n                                                 origin=vp.vec(0, 5.2, 0))\n    self.animacao_aeropendulo.set_posicao_helice(self.valor_angle)\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/interface_interativa_reference/#softwares_aeropendulo.simulador_aeropendulo.interface_interativa.Interface.__slide_angle_referencia","title":"<code>__slide_angle_referencia(valor)</code>","text":"Source code in <code>softwares_aeropendulo/simulador_aeropendulo/interface_interativa.py</code> <pre><code>def __slide_angle_referencia(self, valor) -&gt; None:\n    self.controlador.r = valor.value\n    print(valor.value)\n</code></pre>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/interface_interativa_reference/#softwares_aeropendulo.simulador_aeropendulo.interface_interativa.Interface.__criar_interface","title":"<code>__criar_interface()</code>","text":"Source code in <code>softwares_aeropendulo/simulador_aeropendulo/interface_interativa.py</code> <pre><code>def __criar_interface(self) -&gt; None:\n    self.scene.append_to_caption(\n        \"\\tMenu Interativo Aerop\u00eandulo\\n\")\n    self.scene.append_to_caption(\"\\n\\t \")\n    self.buttom_exe = vp.button(bind=self.__executar,\n                                text=\"Excecutar\",\n                                color=vp.color.white,\n                                background=vp.color.red,\n                                width=100, _height=40)\n    self.scene.append_to_caption(\"\\t\\t\")\n    self.scene.append_to_caption(\n        \"Posi\u00e7\u00e3o Inicial\\t\")\n    vp.winput(bind=self.rotate, prompt=\"Rotate: \", type=\"numeric\",\n              width=100, _height=40)\n    vp.wtext(text=\" Graus\")\n    self.scene.append_to_caption('\\n')\n\n    self.scene.append_to_caption(\"\\n\\n\\t\")\n    self.scene.append_to_caption(\"Refer\u00eancia : \")\n    vp.slider(bind=self.__slide_angle_referencia, min=0, max=2,\n              step=0.001, value=0)\n    self.scene.append_to_caption(\"\\n\\n\")\n</code></pre>"}]}