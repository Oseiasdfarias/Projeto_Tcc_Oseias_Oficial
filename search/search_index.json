{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> <p>Universidade Federal do Par\u00e1</p> <p>Campus Universit\u00e1rio de Tucuru\u00ed</p> <p>Faculdade de Engenharia El\u00e9trica </p> <p></p> <p>"},{"location":"#documentacao-pendulab","title":"Documenta\u00e7\u00e3o PenduLab","text":""},{"location":"#aeropendulo-implementacao-de-um-laboratorio-virtual-para-estudos-de-modelagem-e-controle-de-sistemas-dinamicos","title":"Aerop\u00eandulo: Implementa\u00e7\u00e3o de um Laborat\u00f3rio Virtual para Estudos de Modelagem e Controle de Sistemas Din\u00e2micos","text":""},{"location":"#membros-atuais","title":"Membros Atuais \u2728","text":"Raphael Teixeira\u26a1 Os\u00e9ias Farias\u26a1"},{"location":"#demostracao-simulador","title":"Demostra\u00e7\u00e3o Simulador","text":"<p>"},{"location":"#_1","title":"<p>Projeto no GitHub</p> <p></p>","text":""},{"location":"#ferramentas-desenvolvidas","title":"Ferramentas Desenvolvidas","text":""},{"location":"#prototipo-aeropendulo","title":"Prot\u00f3tipo Aerop\u00eandulo","text":"<p>Implementa um aerop\u00eandulo real, pode ser usado para estudos e testes de controladores e identifica\u00e7\u00e3o de sistemas etc.</p> <p></p>"},{"location":"#gemeo-digital","title":"G\u00eameo Digital","text":"<p>Usa o sinal de sa\u00edda (\u00e2ngulo) para realizar a din\u00e2mica do sinulador.</p> <p></p>"},{"location":"#interface-grafica-de-usuario","title":"Interface Gr\u00e1fica de Usu\u00e1rio","text":"<p>Usada para iteragir em tempo real com o prot\u00f3tipo, esse sistema plotado os gr\u00e1ficos da posi\u00e7\u00e3o angular, erro, sinal de refer\u00eancia, sinal PRBS e sinal de controle em malha fechada.</p> <p></p>"},{"location":"#firmware","title":"Firmware","text":"<p>Implementa o controlador, envio e recebimento de dados inteface gr\u00e1fica / microcontrolador, gera\u00e7\u00e3o de sinal de refer\u00eancia, leitura do sensor potenci\u00f4metro.</p> <p></p>"},{"location":"Implementa%C3%A7%C3%A3o%20do%20Aerop%C3%AAndulo/aeropendulo_doc/","title":"Desenvolvimento do Prot\u00f3tipo","text":"<p> <p></p> <p> Universidade Federal do Par\u00e1 Campus Universit\u00e1rio de Tucuru\u00ed Faculdade de Engenharia El\u00e9trica </p> <p></p> <p> <p>Figura 1 - Prot\u00f3tipo do Aerop\u00eandulo.</p> <p></p> <p></p>"},{"location":"Implementa%C3%A7%C3%A3o%20do%20Aerop%C3%AAndulo/aeropendulo_doc/#em-desenolvimento","title":"EM DESENOLVIMENTO ...","text":""},{"location":"M%C3%B3dulo%20Firmware/aeropendulo_doc/","title":"Desenvolvimento do Firmaware para ESP32","text":"<p> <p></p> <p> Universidade Federal do Par\u00e1 Campus Universit\u00e1rio de Tucuru\u00ed Faculdade de Engenharia El\u00e9trica </p> <p></p> <p> <p>Figura 1 - Diagrama de blocos do Sistema em Malha Fechada.</p> <p></p> <p></p>"},{"location":"M%C3%B3dulo%20Firmware/aeropendulo_doc/#em-desenolvimento","title":"EM DESENOLVIMENTO ...","text":""},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/aeropendulo_doc/","title":"G\u00eameo Digital","text":"<p> <p></p> <p> Universidade Federal do Par\u00e1 Campus Universit\u00e1rio de Tucuru\u00ed Faculdade de Engenharia El\u00e9trica </p> <p></p> <p> <p>Figura 1 - G\u00eameo Digital.</p> <p></p> <p></p>"},{"location":"M%C3%B3dulos%20G%C3%AAmeo%20Digital/aeropendulo_doc/#em-desenolvimento","title":"EM DESENOLVIMENTO ...","text":""},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/animacao_aeropendulo_reference/","title":"Docs M\u00f3dulo animacao_aeropendulo","text":""},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/animacao_aeropendulo_reference/#labvirtual.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo","title":"<code>labvirtual.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo</code>","text":"<p>Classe que implementa a amina\u00e7\u00e3o do Aerop\u00eandulo.</p> Atributo <p>comprimento_braco: tamanho do bra\u00e7o do Aerop\u00eandulo.</p> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>class AnimacaoAeropendulo:\n\"\"\"\n    Classe que implementa a amina\u00e7\u00e3o do Aerop\u00eandulo.\n\n    Atributo:\n        comprimento_braco: tamanho do bra\u00e7o do Aerop\u00eandulo.\n    \"\"\"\n    def __init__(self, comprimento_braco=4.4) -&gt; None:\n        # Par\u00e2metros do Aerop\u00eandulo\n        self.comprimento_braco = comprimento_braco\n        self.scene = vp.canvas(title=\"&lt;center&gt;&lt;h1&gt;Aerop\u00eandulo&lt;/h1&gt;&lt;center/&gt;\",\n                               width=650,\n                               height=580, align=\"left\", autoscale=0, range=5,\n                               center=vp.vec(0, 3, 0),\n                               background=vp.vector(1.7, 0.7, 0.9),\n                               color=vp.vec(1, 0.6, 0.6),\n                               forward=vp.vec(-0.3, 0, -1))\n        self.scene.range = 6\n        # chamando a fun\u00e7\u00e3o para criar a amina\u00e7\u00e3o gr\u00e1fica do Aerop\u00eandulo.\n        self.aeropendulo = self.__aminacao()\n        self.__helice()\n\n    def __aminacao(self) -&gt; vp.compound:\n\"\"\"\n        Classe que implementa o Aerop\u00eandulo.\n\n        Args:\n            comprimento_braco: tamanho do bra\u00e7o do Aerop\u00eandulo.\n        Returns:\n            Retorna um objeto (vpython) que cont\u00eam a estrutura do Aerop\u00eandulo.\n        \"\"\"\n        self.base = vp.box(pos=vp.vec(0, -0.85, 0), size=vp.vec(30, 0.2, 15),\n                           texture=vp.textures.wood)\n        self.parede = vp.box(pos=vp.vec(0, 7.1, -7.55),\n                             size=vp.vec(30, 16, 0.2),\n                             color=vp.vec(0.1, 0.1, 0.1), shininess=0.01)\n        self.sitio = vp.text(pos=vp.vec(0, 8.1, -7.45),\n                             text=\"AEROP\u00caNDULO\", color=vp.vec(1, 0.6, 0.6),\n                             align='center', depth=0)\n\n        self.__desenhar_pendulo()\n\n        # Eixo de sustenta\u00e7\u00e3o.\n        self.eixo = vp.cylinder(pos=vp.vec(0, 5.2, 0.3), radius=0.09,\n                                axis=vp.vec(0, 0, -2),\n                                color=vp.vec(0.7, 0.4, 0.1))\n\n        # Estrutura de sustenta\u00e7\u00e3o do aerop\u00eandulo.\n        self.b1 = vp.box(pos=vp.vec(0, 1.7, -2), size=vp.vec(3, 8, 0.6),\n                         color=vp.vec(0.8, 0.8, 0.8))\n\n        self.b2 = vp.box(pos=vp.vec(0, -0.6, -1.5), size=vp.vec(4.5, 0.4, 2.5),\n                         color=vp.vec(0.8, 0.8, 0.8))\n\n        self.logo = vp.box(pos=vp.vec(0, 2.5, -1.799),\n                           texture=\"https://i.imgur.com/D2xnkpF.png\",\n                           size=vp.vec(2, 2, 0.2))\n\n        self.ufpa = vp.text(pos=vp.vec(0, 3.7, -1.7), text=\"UFPA\",\n                            color=vp.vec(1, 0.6, 0.6), height=0.5,\n                            align='center', depth=0)\n\n        return self.pendulo\n\n    def __helice(self) -&gt; None:\n        self.helice = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                             size=vp.vec(0.05, 0.2, 2),\n                             color=vp.vec(1, 1, 0))\n\n        self.helice1 = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                              size=vp.vec(0.05, 0.2, 2),\n                              color=vp.vec(1, 1, 0))\n        self.helice1.axis = self.pendulo.axis\n        self.helice1.size = vp.vec(0.05, 0.2, 2)\n        self.helice1.rotate(axis=vp.vec(1, 0, 0),\n                            angle=vp.pi/4)\n\n        self.helice2 = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                              size=vp.vec(0.05, 0.2, 2),\n                              color=vp.vec(1, 1, 0))\n        self.helice2.axis = self.pendulo.axis\n        self.helice2.size = vp.vec(0.05, 0.2, 2)\n        self.helice2.rotate(axis=vp.vec(1, 0, 0),\n                            angle=vp.pi/2)\n\n        self.helice3 = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                              size=vp.vec(0.05, 0.2, 2),\n                              color=vp.vec(1, 1, 0))\n        self.helice3.axis = self.pendulo.axis\n        self.helice3.size = vp.vec(0.05, 0.2, 2)\n        self.helice3.rotate(axis=vp.vec(1, 0, 0),\n                            angle=3*vp.pi/4.)\n        self.helice1.visible = False\n        self.helice2.visible = False\n        self.helice3.visible = False\n\n    def pause_giro(self) -&gt; None:\n        self.helice1.visible = True\n        self.helice2.visible = True\n        self.helice3.visible = True\n\n    def girar_helice(self) -&gt; None:\n        self.helice1.visible = False\n        self.helice2.visible = False\n        self.helice3.visible = False\n\n    def set_posicao_helice(self, angle):\n        self.helice.rotate(axis=vp.vec(0, 0, 1),\n                           angle=angle,\n                           origin=vp.vec(0, 5.2, 0))\n        self.helice.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice1.rotate(axis=vp.vec(0, 0, 1),\n                            angle=angle,\n                            origin=vp.vec(0, 5.2, 0))\n        self.helice1.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice2.rotate(axis=vp.vec(0, 0, 1),\n                            angle=angle,\n                            origin=vp.vec(0, 5.2, 0))\n        self.helice2.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice3.rotate(axis=vp.vec(0, 0, 1),\n                            angle=angle,\n                            origin=vp.vec(0, 5.2, 0))\n        self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n    def update_helice(self, angle, ts) -&gt; None:\n\n        self.helice.size = vp.vec(0.05, 0.2, 2)\n        self.helice1.size = vp.vec(0.05, 0.2, 2)\n        self.helice2.size = vp.vec(0.05, 0.2, 2)\n        self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice.axis = self.pendulo.axis\n        self.helice.size = vp.vec(0.05, 0.2, 2)\n        self.helice1.axis = self.pendulo.axis\n        self.helice1.size = vp.vec(0.05, 0.2, 2)\n        self.helice2.axis = self.pendulo.axis\n        self.helice2.size = vp.vec(0.05, 0.2, 2)\n        self.helice3.axis = self.pendulo.axis\n        self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice.rotate(axis=vp.vec(0, 0, 1),\n                           angle=angle*ts,\n                           origin=vp.vec(0, 5.2, 0))\n        self.helice.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice1.rotate(axis=vp.vec(0, 0, 1),\n                            angle=angle*ts,\n                            origin=vp.vec(0, 5.2, 0))\n        self.helice1.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice2.rotate(axis=vp.vec(0, 0, 1),\n                            angle=angle*ts,\n                            origin=vp.vec(0, 5.2, 0))\n        self.helice2.size = vp.vec(0.05, 0.2, 2)\n\n        self.helice3.rotate(axis=vp.vec(0, 0, 1),\n                            angle=angle*ts,\n                            origin=vp.vec(0, 5.2, 0))\n        self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n        # obs tentando ajustar o diro das h\u00e9lices apenas para um lado ....\n        # if x[1] + interface.valor_angle &lt; np.pi/2:\n        #     ag = 0.3\n        # else:\n        #     ag = -0.8\n\n        self.helice.rotate(axis=vp.vec(1, 0,  0), angle=0.09)\n        self.helice1.rotate(axis=vp.vec(1, 0, 0), angle=0.09)\n        self.helice2.rotate(axis=vp.vec(1, 0, 0), angle=0.09)\n        self.helice3.rotate(axis=vp.vec(1, 0, 0), angle=0.09)\n\n    def __desenhar_pendulo(self) -&gt; None:\n        # Bra\u00e7o do Aerop\u00eandulo.\n        self.barra = vp.box(pos=vp.vec(0, -1.4, 0),\n                            size=vp.vec(0.2, self.comprimento_braco, 0.2),\n                            color=vp.vec(0.5, 0.5, 0.95))\n\n        # Base que acopla o motor ao bra\u00e7o.\n        self.base_motor = vp.cylinder(pos=vp.vec(-0.2, -4, 0), radius=0.4,\n                                      axis=vp.vec(0.4, 0, 0),\n                                      color=vp.vec(0.5, 0.5, 0.95))\n        # Armadura do motor.\n        self.base2_motor = vp.box(pos=vp.vec(0.4, -4, 0),\n                                  size=vp.vec(0.4, 0.4, 0.4),\n                                  color=vp.vec(1, 1, 0))\n\n        # Eixo que da h\u00e9lice do motor\n        self.base_helice = vp.cylinder(pos=vp.vec(0.4, -4, 0), radius=0.05,\n                                       axis=vp.vec(0.4, 0, 0),\n                                       color=vp.vec(0.5, 0.5, 0.8))\n\n        # Motor completo.\n        self.motor = vp.compound([self.base_motor,\n                                  self.base2_motor,\n                                  self.base_helice])\n\n        # Aerop\u00eandulo\n        self.pendulo = vp.compound([self.barra, self.motor])\n        self.pendulo.pos = vp.vec(0.31, 2.7, 0)\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/animacao_aeropendulo_reference/#labvirtual.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.__aminacao","title":"<code>__aminacao()</code>","text":"<p>Classe que implementa o Aerop\u00eandulo.</p> <p>Parameters:</p> Name Type Description Default <code>comprimento_braco</code> <p>tamanho do bra\u00e7o do Aerop\u00eandulo.</p> required <p>Returns:</p> Type Description <code>vp.compound</code> <p>Retorna um objeto (vpython) que cont\u00eam a estrutura do Aerop\u00eandulo.</p> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def __aminacao(self) -&gt; vp.compound:\n\"\"\"\n    Classe que implementa o Aerop\u00eandulo.\n\n    Args:\n        comprimento_braco: tamanho do bra\u00e7o do Aerop\u00eandulo.\n    Returns:\n        Retorna um objeto (vpython) que cont\u00eam a estrutura do Aerop\u00eandulo.\n    \"\"\"\n    self.base = vp.box(pos=vp.vec(0, -0.85, 0), size=vp.vec(30, 0.2, 15),\n                       texture=vp.textures.wood)\n    self.parede = vp.box(pos=vp.vec(0, 7.1, -7.55),\n                         size=vp.vec(30, 16, 0.2),\n                         color=vp.vec(0.1, 0.1, 0.1), shininess=0.01)\n    self.sitio = vp.text(pos=vp.vec(0, 8.1, -7.45),\n                         text=\"AEROP\u00caNDULO\", color=vp.vec(1, 0.6, 0.6),\n                         align='center', depth=0)\n\n    self.__desenhar_pendulo()\n\n    # Eixo de sustenta\u00e7\u00e3o.\n    self.eixo = vp.cylinder(pos=vp.vec(0, 5.2, 0.3), radius=0.09,\n                            axis=vp.vec(0, 0, -2),\n                            color=vp.vec(0.7, 0.4, 0.1))\n\n    # Estrutura de sustenta\u00e7\u00e3o do aerop\u00eandulo.\n    self.b1 = vp.box(pos=vp.vec(0, 1.7, -2), size=vp.vec(3, 8, 0.6),\n                     color=vp.vec(0.8, 0.8, 0.8))\n\n    self.b2 = vp.box(pos=vp.vec(0, -0.6, -1.5), size=vp.vec(4.5, 0.4, 2.5),\n                     color=vp.vec(0.8, 0.8, 0.8))\n\n    self.logo = vp.box(pos=vp.vec(0, 2.5, -1.799),\n                       texture=\"https://i.imgur.com/D2xnkpF.png\",\n                       size=vp.vec(2, 2, 0.2))\n\n    self.ufpa = vp.text(pos=vp.vec(0, 3.7, -1.7), text=\"UFPA\",\n                        color=vp.vec(1, 0.6, 0.6), height=0.5,\n                        align='center', depth=0)\n\n    return self.pendulo\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/animacao_aeropendulo_reference/#labvirtual.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.__helice","title":"<code>__helice()</code>","text":"Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def __helice(self) -&gt; None:\n    self.helice = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                         size=vp.vec(0.05, 0.2, 2),\n                         color=vp.vec(1, 1, 0))\n\n    self.helice1 = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                          size=vp.vec(0.05, 0.2, 2),\n                          color=vp.vec(1, 1, 0))\n    self.helice1.axis = self.pendulo.axis\n    self.helice1.size = vp.vec(0.05, 0.2, 2)\n    self.helice1.rotate(axis=vp.vec(1, 0, 0),\n                        angle=vp.pi/4)\n\n    self.helice2 = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                          size=vp.vec(0.05, 0.2, 2),\n                          color=vp.vec(1, 1, 0))\n    self.helice2.axis = self.pendulo.axis\n    self.helice2.size = vp.vec(0.05, 0.2, 2)\n    self.helice2.rotate(axis=vp.vec(1, 0, 0),\n                        angle=vp.pi/2)\n\n    self.helice3 = vp.box(pos=vp.vec(0.8, 0.6, 0),\n                          size=vp.vec(0.05, 0.2, 2),\n                          color=vp.vec(1, 1, 0))\n    self.helice3.axis = self.pendulo.axis\n    self.helice3.size = vp.vec(0.05, 0.2, 2)\n    self.helice3.rotate(axis=vp.vec(1, 0, 0),\n                        angle=3*vp.pi/4.)\n    self.helice1.visible = False\n    self.helice2.visible = False\n    self.helice3.visible = False\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/animacao_aeropendulo_reference/#labvirtual.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.pause_giro","title":"<code>pause_giro()</code>","text":"Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def pause_giro(self) -&gt; None:\n    self.helice1.visible = True\n    self.helice2.visible = True\n    self.helice3.visible = True\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/animacao_aeropendulo_reference/#labvirtual.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.girar_helice","title":"<code>girar_helice()</code>","text":"Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def girar_helice(self) -&gt; None:\n    self.helice1.visible = False\n    self.helice2.visible = False\n    self.helice3.visible = False\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/animacao_aeropendulo_reference/#labvirtual.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.set_posicao_helice","title":"<code>set_posicao_helice(angle)</code>","text":"Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def set_posicao_helice(self, angle):\n    self.helice.rotate(axis=vp.vec(0, 0, 1),\n                       angle=angle,\n                       origin=vp.vec(0, 5.2, 0))\n    self.helice.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice1.rotate(axis=vp.vec(0, 0, 1),\n                        angle=angle,\n                        origin=vp.vec(0, 5.2, 0))\n    self.helice1.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice2.rotate(axis=vp.vec(0, 0, 1),\n                        angle=angle,\n                        origin=vp.vec(0, 5.2, 0))\n    self.helice2.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice3.rotate(axis=vp.vec(0, 0, 1),\n                        angle=angle,\n                        origin=vp.vec(0, 5.2, 0))\n    self.helice3.size = vp.vec(0.05, 0.2, 2)\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/animacao_aeropendulo_reference/#labvirtual.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.update_helice","title":"<code>update_helice(angle, ts)</code>","text":"Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def update_helice(self, angle, ts) -&gt; None:\n\n    self.helice.size = vp.vec(0.05, 0.2, 2)\n    self.helice1.size = vp.vec(0.05, 0.2, 2)\n    self.helice2.size = vp.vec(0.05, 0.2, 2)\n    self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice.axis = self.pendulo.axis\n    self.helice.size = vp.vec(0.05, 0.2, 2)\n    self.helice1.axis = self.pendulo.axis\n    self.helice1.size = vp.vec(0.05, 0.2, 2)\n    self.helice2.axis = self.pendulo.axis\n    self.helice2.size = vp.vec(0.05, 0.2, 2)\n    self.helice3.axis = self.pendulo.axis\n    self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice.rotate(axis=vp.vec(0, 0, 1),\n                       angle=angle*ts,\n                       origin=vp.vec(0, 5.2, 0))\n    self.helice.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice1.rotate(axis=vp.vec(0, 0, 1),\n                        angle=angle*ts,\n                        origin=vp.vec(0, 5.2, 0))\n    self.helice1.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice2.rotate(axis=vp.vec(0, 0, 1),\n                        angle=angle*ts,\n                        origin=vp.vec(0, 5.2, 0))\n    self.helice2.size = vp.vec(0.05, 0.2, 2)\n\n    self.helice3.rotate(axis=vp.vec(0, 0, 1),\n                        angle=angle*ts,\n                        origin=vp.vec(0, 5.2, 0))\n    self.helice3.size = vp.vec(0.05, 0.2, 2)\n\n    # obs tentando ajustar o diro das h\u00e9lices apenas para um lado ....\n    # if x[1] + interface.valor_angle &lt; np.pi/2:\n    #     ag = 0.3\n    # else:\n    #     ag = -0.8\n\n    self.helice.rotate(axis=vp.vec(1, 0,  0), angle=0.09)\n    self.helice1.rotate(axis=vp.vec(1, 0, 0), angle=0.09)\n    self.helice2.rotate(axis=vp.vec(1, 0, 0), angle=0.09)\n    self.helice3.rotate(axis=vp.vec(1, 0, 0), angle=0.09)\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/animacao_aeropendulo_reference/#labvirtual.simulador_aeropendulo.animacao_aeropendulo.AnimacaoAeropendulo.__desenhar_pendulo","title":"<code>__desenhar_pendulo()</code>","text":"Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/animacao_aeropendulo.py</code> <pre><code>def __desenhar_pendulo(self) -&gt; None:\n    # Bra\u00e7o do Aerop\u00eandulo.\n    self.barra = vp.box(pos=vp.vec(0, -1.4, 0),\n                        size=vp.vec(0.2, self.comprimento_braco, 0.2),\n                        color=vp.vec(0.5, 0.5, 0.95))\n\n    # Base que acopla o motor ao bra\u00e7o.\n    self.base_motor = vp.cylinder(pos=vp.vec(-0.2, -4, 0), radius=0.4,\n                                  axis=vp.vec(0.4, 0, 0),\n                                  color=vp.vec(0.5, 0.5, 0.95))\n    # Armadura do motor.\n    self.base2_motor = vp.box(pos=vp.vec(0.4, -4, 0),\n                              size=vp.vec(0.4, 0.4, 0.4),\n                              color=vp.vec(1, 1, 0))\n\n    # Eixo que da h\u00e9lice do motor\n    self.base_helice = vp.cylinder(pos=vp.vec(0.4, -4, 0), radius=0.05,\n                                   axis=vp.vec(0.4, 0, 0),\n                                   color=vp.vec(0.5, 0.5, 0.8))\n\n    # Motor completo.\n    self.motor = vp.compound([self.base_motor,\n                              self.base2_motor,\n                              self.base_helice])\n\n    # Aerop\u00eandulo\n    self.pendulo = vp.compound([self.barra, self.motor])\n    self.pendulo.pos = vp.vec(0.31, 2.7, 0)\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/graficos_aeropendulo_reference/","title":"Docs M\u00f3dulo graficos_aeropendulo","text":""},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/graficos_aeropendulo_reference/#labvirtual.simulador_aeropendulo.graficos_aeropendulo.Graficos","title":"<code>labvirtual.simulador_aeropendulo.graficos_aeropendulo.Graficos</code>","text":"<p>Gr\u00e1fico para plotagem dos dados dos estados do Aerop\u00e9ndulo.</p> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/graficos_aeropendulo.py</code> <pre><code>class Graficos:\n\"\"\"\n    Gr\u00e1fico para plotagem dos dados dos estados do Aerop\u00e9ndulo.\n    \"\"\"\n    def __init__(self, largura: int = 650, altura: int = 400):\n        self.width = largura\n        self.height = altura\n\n    def graficos(self) -&gt; Tuple:\n\"\"\"\n        M\u00e9todo que cria os Gr\u00e1fico.\n\n        Returns:\n            Retorna uma tupla contendo o objeto do gr\u00e1fico e da curvas.\n        \"\"\"\n        titulo = \"Gr\u00e1ficos dos estados do Aerop\u00eandulo\"\n        self.grafico = vp.graph(title=titulo, align=\"right\",\n                                xtitle='tempo (s)', fast=True,\n                                width=self.width, height=self.height,\n                                center=vp.vector(0, 12, 0), scroll=True,\n                                xmin=0, xmax=14, ymin=-0.5, ymax=6, dot=True,\n                                background=vp.vector(0.95, 0.95, 0.95))\n\n        self.curva1 = vp.gcurve(color=vp.color.blue, width=3,\n                                markers=False, label=\"Posi\u00e7\u00e3o Angular (rad)\",\n                                dot=True, dot_color=vp.color.blue)\n\n        self.curva2 = vp.gcurve(color=vp.color.black, width=3, markers=False,\n                                label=\"Refer\u00eancia Angular(rad)\", dot=True,\n                                dot_color=vp.color.black)\n\n        self.curva3 = vp.gcurve(color=vp.color.red, width=3, markers=False,\n                                label=\"Velocidade Angular (rad/s)\", dot=True,\n                                dot_color=vp.color.red)\n\n        self.curva4 = vp.gcurve(color=vp.color.orange, width=3, markers=False,\n                                label=\"Sinal de Controle (V)\", dot=True,\n                                dot_color=vp.color.orange)\n\n        return self.grafico, self.curva1, self.curva2, self.curva3, self.curva4\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/graficos_aeropendulo_reference/#labvirtual.simulador_aeropendulo.graficos_aeropendulo.Graficos.graficos","title":"<code>graficos()</code>","text":"<p>M\u00e9todo que cria os Gr\u00e1fico.</p> <p>Returns:</p> Type Description <code>Tuple</code> <p>Retorna uma tupla contendo o objeto do gr\u00e1fico e da curvas.</p> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/graficos_aeropendulo.py</code> <pre><code>def graficos(self) -&gt; Tuple:\n\"\"\"\n    M\u00e9todo que cria os Gr\u00e1fico.\n\n    Returns:\n        Retorna uma tupla contendo o objeto do gr\u00e1fico e da curvas.\n    \"\"\"\n    titulo = \"Gr\u00e1ficos dos estados do Aerop\u00eandulo\"\n    self.grafico = vp.graph(title=titulo, align=\"right\",\n                            xtitle='tempo (s)', fast=True,\n                            width=self.width, height=self.height,\n                            center=vp.vector(0, 12, 0), scroll=True,\n                            xmin=0, xmax=14, ymin=-0.5, ymax=6, dot=True,\n                            background=vp.vector(0.95, 0.95, 0.95))\n\n    self.curva1 = vp.gcurve(color=vp.color.blue, width=3,\n                            markers=False, label=\"Posi\u00e7\u00e3o Angular (rad)\",\n                            dot=True, dot_color=vp.color.blue)\n\n    self.curva2 = vp.gcurve(color=vp.color.black, width=3, markers=False,\n                            label=\"Refer\u00eancia Angular(rad)\", dot=True,\n                            dot_color=vp.color.black)\n\n    self.curva3 = vp.gcurve(color=vp.color.red, width=3, markers=False,\n                            label=\"Velocidade Angular (rad/s)\", dot=True,\n                            dot_color=vp.color.red)\n\n    self.curva4 = vp.gcurve(color=vp.color.orange, width=3, markers=False,\n                            label=\"Sinal de Controle (V)\", dot=True,\n                            dot_color=vp.color.orange)\n\n    return self.grafico, self.curva1, self.curva2, self.curva3, self.curva4\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/implementacao_controlador_reference/","title":"Docs M\u00f3dulo implementacao_controlador","text":""},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/implementacao_controlador_reference/#labvirtual.simulador_aeropendulo.implementacao_controlador.ControladorDiscreto","title":"<code>labvirtual.simulador_aeropendulo.implementacao_controlador.ControladorDiscreto</code>","text":"<p>Classe que implementa os controladores para o sistema.</p> <p>Parameters:</p> Name Type Description Default <code>referencia</code> <code>int</code> <p>int - Sinal de refer\u00eancia para o controlador seguir.</p> <code>1</code> <code>T</code> <code>float</code> <p>Per\u00edodo de amostragem do controlador.</p> <code>0.0625</code> Return <p>None</p> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/implementacao_controlador.py</code> <pre><code>class ControladorDiscreto:\n\"\"\"\n        Classe que implementa os controladores para o sistema.\n        Args:\n            referencia: int - Sinal de refer\u00eancia para o controlador seguir.\n            T: Per\u00edodo de amostragem do controlador.\n        Return:\n            None\n    \"\"\"\n    def __init__(self, referencia: int = 1, T: float = 0.0625) -&gt; None:\n        self.uk = 0\n        self.uk1 = 0\n        self.ek = 0\n        self.ek1 = 0\n        self.yout = 0\n        self.k = 0\n        self.r = referencia\n        self.T = T\n\n    # Pega o sinal do sensor\n    def set_sensor(self, yout: float = 1) -&gt; None:\n\"\"\"\n            Recebe o sinal de sa\u00edda, o \u00e2ngulo do bra\u00e7o do aerop\u00eandulo.\n        Args:\n            yout: Sinal do sensor de \u00e2ngulo.\n        Return:\n            None\n        \"\"\"\n        self.yout = yout\n\n    # disponibiliza o sinal de controle\n    def get_u(self) -&gt; float:\n\"\"\"\n            M\u00e9todo que retorna o sinal de controle.\n        Return:\n            float: Sinal de controle.\n        \"\"\"\n        return self.uk\n\n    # Calcula o sinal de controle Proporcional Integral.\n    def control_pi(self) -&gt; None:\n\"\"\"\n            M\u00e9todo que implementa o controle Proporcional Integral\n            discretizado.\n        Return:\n            None\n        \"\"\"\n        self.ek = self.r - self.yout\n        self.uk = self.uk1 + 0.2165 * self.ek - 0.2087 * self.ek1\n        self.ek1 = self.ek\n        self.uk1 = self.uk\n        self.k = self.k + 1\n\n    def controle_proporcional(self, kp=1.0):\n\"\"\"\n            M\u00e9todo que implementa o controle Proporcional discretizado.\n        Args:\n            kp: Ganho do controlador Proporcional.\n        Return:\n            None\n        \"\"\"\n        self.ek = self.r - self.yout\n        self.KP = kp\n        self.uk = self.KP * self.ek\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/implementacao_controlador_reference/#labvirtual.simulador_aeropendulo.implementacao_controlador.ControladorDiscreto.set_sensor","title":"<code>set_sensor(yout=1)</code>","text":"<pre><code>Recebe o sinal de sa\u00edda, o \u00e2ngulo do bra\u00e7o do aerop\u00eandulo.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>yout</code> <code>float</code> <p>Sinal do sensor de \u00e2ngulo.</p> <code>1</code> Return <p>None</p> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/implementacao_controlador.py</code> <pre><code>def set_sensor(self, yout: float = 1) -&gt; None:\n\"\"\"\n        Recebe o sinal de sa\u00edda, o \u00e2ngulo do bra\u00e7o do aerop\u00eandulo.\n    Args:\n        yout: Sinal do sensor de \u00e2ngulo.\n    Return:\n        None\n    \"\"\"\n    self.yout = yout\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/implementacao_controlador_reference/#labvirtual.simulador_aeropendulo.implementacao_controlador.ControladorDiscreto.get_u","title":"<code>get_u()</code>","text":"<pre><code>M\u00e9todo que retorna o sinal de controle.\n</code></pre> Return <p>float: Sinal de controle.</p> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/implementacao_controlador.py</code> <pre><code>def get_u(self) -&gt; float:\n\"\"\"\n        M\u00e9todo que retorna o sinal de controle.\n    Return:\n        float: Sinal de controle.\n    \"\"\"\n    return self.uk\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/implementacao_controlador_reference/#labvirtual.simulador_aeropendulo.implementacao_controlador.ControladorDiscreto.control_pi","title":"<code>control_pi()</code>","text":"<pre><code>M\u00e9todo que implementa o controle Proporcional Integral\ndiscretizado.\n</code></pre> Return <p>None</p> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/implementacao_controlador.py</code> <pre><code>def control_pi(self) -&gt; None:\n\"\"\"\n        M\u00e9todo que implementa o controle Proporcional Integral\n        discretizado.\n    Return:\n        None\n    \"\"\"\n    self.ek = self.r - self.yout\n    self.uk = self.uk1 + 0.2165 * self.ek - 0.2087 * self.ek1\n    self.ek1 = self.ek\n    self.uk1 = self.uk\n    self.k = self.k + 1\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/implementacao_controlador_reference/#labvirtual.simulador_aeropendulo.implementacao_controlador.ControladorDiscreto.controle_proporcional","title":"<code>controle_proporcional(kp=1.0)</code>","text":"<pre><code>M\u00e9todo que implementa o controle Proporcional discretizado.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>kp</code> <p>Ganho do controlador Proporcional.</p> <code>1.0</code> Return <p>None</p> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/implementacao_controlador.py</code> <pre><code>def controle_proporcional(self, kp=1.0):\n\"\"\"\n        M\u00e9todo que implementa o controle Proporcional discretizado.\n    Args:\n        kp: Ganho do controlador Proporcional.\n    Return:\n        None\n    \"\"\"\n    self.ek = self.r - self.yout\n    self.KP = kp\n    self.uk = self.KP * self.ek\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/interface_interativa_reference/","title":"Docs M\u00f3dulo interface_interativa","text":""},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/interface_interativa_reference/#labvirtual.simulador_aeropendulo.interface_interativa.Interface","title":"<code>labvirtual.simulador_aeropendulo.interface_interativa.Interface</code>","text":"<p>Classe que implementa a interface interativa do simulador do Aerop\u00eandulo.</p> Atributo <p>animacao_aeropendulo: Inst\u00e2ncia da classe AnimacaoAeropendulo. controlador: Inst\u00e2ncia da classe AnimacaoAeropendulo.</p> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/interface_interativa.py</code> <pre><code>class Interface:\n\"\"\"\n    Classe que implementa a interface interativa do simulador do Aerop\u00eandulo.\n\n    Atributo:\n        animacao_aeropendulo: Inst\u00e2ncia da classe AnimacaoAeropendulo.\n        controlador: Inst\u00e2ncia da classe AnimacaoAeropendulo.\n    \"\"\"\n    def __init__(self, animacao_aeropendulo, controlador) -&gt; None:\n        self.EXE = False\n        self.valor_angle = 0.0\n        self.controlador = controlador\n        self.animacao_aeropendulo = animacao_aeropendulo\n        self.scene = animacao_aeropendulo.scene\n\n        # Criando a interface\n        self.__criar_interface()\n\n    def __executar(self, b) -&gt; None:\n        if self.EXE:\n            self.animacao_aeropendulo.girar_helice()\n            b.text = \"Executar\"\n        else:\n            b.text = \"Pausar\"\n            self.animacao_aeropendulo.pause_giro()\n        self.EXE = not self.EXE\n\n    def rotate(self, angle) -&gt; None:\n        self.valor_angle = (angle.number)*(vp.pi/180.0)\n        self.animacao_aeropendulo.aeropendulo.rotate(axis=vp.vec(0, 0, 1),\n                                                     angle=self.valor_angle,\n                                                     origin=vp.vec(0, 5.2, 0))\n        self.animacao_aeropendulo.set_posicao_helice(self.valor_angle)\n\n    def __slide_angle_referencia(self, valor) -&gt; None:\n        self.controlador.r = valor.value\n        print(valor.value)\n\n    def __criar_interface(self) -&gt; None:\n        self.scene.append_to_caption(\n            \"\\tMenu Interativo Aerop\u00eandulo\\n\")\n        self.scene.append_to_caption(\"\\n\\t \")\n        self.buttom_exe = vp.button(bind=self.__executar,\n                                    text=\"Excecutar\",\n                                    color=vp.color.white,\n                                    background=vp.color.red,\n                                    width=100, _height=40)\n        self.scene.append_to_caption(\"\\t\\t\")\n        self.scene.append_to_caption(\n            \"Posi\u00e7\u00e3o Inicial\\t\")\n        vp.winput(bind=self.rotate, prompt=\"Rotate: \", type=\"numeric\",\n                  width=100, _height=40)\n        vp.wtext(text=\" Graus\")\n        self.scene.append_to_caption('\\n')\n\n        self.scene.append_to_caption(\"\\n\\n\\t\")\n        self.scene.append_to_caption(\"Refer\u00eancia : \")\n        vp.slider(bind=self.__slide_angle_referencia, min=0, max=2,\n                  step=0.001, value=0)\n        self.scene.append_to_caption(\"\\n\\n\")\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/interface_interativa_reference/#labvirtual.simulador_aeropendulo.interface_interativa.Interface.__executar","title":"<code>__executar(b)</code>","text":"Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/interface_interativa.py</code> <pre><code>def __executar(self, b) -&gt; None:\n    if self.EXE:\n        self.animacao_aeropendulo.girar_helice()\n        b.text = \"Executar\"\n    else:\n        b.text = \"Pausar\"\n        self.animacao_aeropendulo.pause_giro()\n    self.EXE = not self.EXE\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/interface_interativa_reference/#labvirtual.simulador_aeropendulo.interface_interativa.Interface.rotate","title":"<code>rotate(angle)</code>","text":"Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/interface_interativa.py</code> <pre><code>def rotate(self, angle) -&gt; None:\n    self.valor_angle = (angle.number)*(vp.pi/180.0)\n    self.animacao_aeropendulo.aeropendulo.rotate(axis=vp.vec(0, 0, 1),\n                                                 angle=self.valor_angle,\n                                                 origin=vp.vec(0, 5.2, 0))\n    self.animacao_aeropendulo.set_posicao_helice(self.valor_angle)\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/interface_interativa_reference/#labvirtual.simulador_aeropendulo.interface_interativa.Interface.__slide_angle_referencia","title":"<code>__slide_angle_referencia(valor)</code>","text":"Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/interface_interativa.py</code> <pre><code>def __slide_angle_referencia(self, valor) -&gt; None:\n    self.controlador.r = valor.value\n    print(valor.value)\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/interface_interativa_reference/#labvirtual.simulador_aeropendulo.interface_interativa.Interface.__criar_interface","title":"<code>__criar_interface()</code>","text":"Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/interface_interativa.py</code> <pre><code>def __criar_interface(self) -&gt; None:\n    self.scene.append_to_caption(\n        \"\\tMenu Interativo Aerop\u00eandulo\\n\")\n    self.scene.append_to_caption(\"\\n\\t \")\n    self.buttom_exe = vp.button(bind=self.__executar,\n                                text=\"Excecutar\",\n                                color=vp.color.white,\n                                background=vp.color.red,\n                                width=100, _height=40)\n    self.scene.append_to_caption(\"\\t\\t\")\n    self.scene.append_to_caption(\n        \"Posi\u00e7\u00e3o Inicial\\t\")\n    vp.winput(bind=self.rotate, prompt=\"Rotate: \", type=\"numeric\",\n              width=100, _height=40)\n    vp.wtext(text=\" Graus\")\n    self.scene.append_to_caption('\\n')\n\n    self.scene.append_to_caption(\"\\n\\n\\t\")\n    self.scene.append_to_caption(\"Refer\u00eancia : \")\n    vp.slider(bind=self.__slide_angle_referencia, min=0, max=2,\n              step=0.001, value=0)\n    self.scene.append_to_caption(\"\\n\\n\")\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/modelo_mat_aeropendulo_reference/","title":"Docs M\u00f3dulo modelo_mat_aeropendulo","text":""},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/modelo_mat_aeropendulo_reference/#labvirtual.simulador_aeropendulo.modelo_mat_aeropendulo.ModeloMatAeropendulo","title":"<code>labvirtual.simulador_aeropendulo.modelo_mat_aeropendulo.ModeloMatAeropendulo</code>","text":"<p>         Bases: <code>object</code></p> <p>Modelo Matem\u00e1tico do Aerop\u00eandulo para simula\u00e7\u00e3o din\u00e2mica</p> <p>Parameters:</p> Name Type Description Default <code>x_0</code> <code>List[float]</code> <p>Condi\u00e7\u00f5es iniciais para simula\u00e7\u00e3o.</p> <code>[0.1, -0.5]</code> <code>K_m</code> <code>float</code> <p>float</p> <code>0.0296</code> <code>m</code> <code>float</code> <p>Massa total do Aero\u00e8ndulo (bra\u00e7o + Motor + H\u00e9lices).</p> <code>0.36</code> <code>d</code> <code>float</code> <p>Tamanho do Bra\u00e7o do Aerop\u00eandulo.</p> <code>0.03</code> <code>J</code> <code>float</code> <p>Momento de In\u00e9rcia do Aerop\u00eandulo.</p> <code>0.0106</code> <code>c</code> <code>float</code> <p>coeficente de atrito do Aerop\u00eandulo.</p> <code>0.0076</code> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/modelo_mat_aeropendulo.py</code> <pre><code>class ModeloMatAeropendulo(object):\n\"\"\"\n    Modelo Matem\u00e1tico do Aerop\u00eandulo para simula\u00e7\u00e3o din\u00e2mica\n\n    Args:\n        x_0: Condi\u00e7\u00f5es iniciais para simula\u00e7\u00e3o.\n        K_m: float\n        m: Massa total do Aero\u00e8ndulo (bra\u00e7o + Motor + H\u00e9lices).\n        d: Tamanho do Bra\u00e7o do Aerop\u00eandulo.\n        J: Momento de In\u00e9rcia do Aerop\u00eandulo.\n        c: coeficente de atrito do Aerop\u00eandulo.\n    \"\"\"\n\n    def __init__(self, x_0: List[float] = [0.1, -0.5], K_m: float = 0.0296,\n                 m: float = 0.36, d: float = 0.03, J: float = 0.0106,\n                 c: float = 0.0076) -&gt; None:\n        # Par\u00e2metros do Aerop\u00eandulo.\n        self.K_m = K_m\n        self.m = m\n        self.d = d\n        self.J = J\n        self.g = 9.8\n        self.c = c\n\n        # Configura\u00e7\u00e3o para simula\u00e7\u00e3o\n        self.t: Array1XN\n        self.x = x_0\n        self.x1: List[List[float]] = [[], []]\n\n        # Sinal de Entrada\n        self.u = 0.0\n\n        # Sinula\u00e7\u00e3o\n        self.simu = False\n        self.simu_dinamic = False\n\n    def set_u(self, u):\n        self.u = u\n\n    def modelo_aeropendulo(self, x: List[float] | Array1XN,\n                           t: float | Array1XN) -&gt; Array1XN:\n\"\"\"\n        M\u00e9todo que implementa o modelo matem\u00e1tico do aerop\u00eandulo.\n        Args:\n            x: Estados atuais do sistema.\n            t: necess\u00e1rio caso use scipy.integrate.odeint\n        Returns:\n            Retorna um array numpy contendo a derivada dos estados.\n        \"\"\"\n        # Vari\u00e1veis de estado a partir do vetor de estados\n        x1, x2 = x\n\n        # Equa\u00e7\u00e3o de estado dx2 = f(x, u)\n        dx2 = x1\n\n        # Equa\u00e7\u00e3o de estado dx1 = f(x, u)\n        dx1 = (- x1*self.c - self.m*self.g*self.d*np.sin(x2) +\n               self.u*self.K_m) / (self.J)\n        dx = np.array([dx1, dx2])      # Derivada do vetor de estados\n        return dx                      # Retorna a derivada do vetor de estados\n\n    def simular(self, t_simu: int = 100, ts: float = 0.1,\n                x_0: List[float] = [0.1, -0.5]) -&gt; None:\n\"\"\"\n        M\u00e9todo que implementa uma simula\u00e7\u00e3o com scipy.integrate.odeint,\n        no final plota os gr\u00e1ficos dos estados do sistema para a dada\n        simula\u00e7\u00e3o.\n        Args:\n            t_simu: tempo de simula\u00e7\u00e3o, Padr\u00e3o: 100.\n            ts: Per\u00edodo de amostragem, Padr\u00e3o: 0.1\n            x_0: Condi\u00e7\u00f5es iniciais para simula\u00e7\u00e3o\n        \"\"\"\n        self.simu = True\n        self.t_simu = t_simu\n        self.ts = ts\n        self.t = ts*np.arange(0, t_simu+ts, ts)\n        # Condi\u00e7\u00f5es iniciais\n        self.x_0 = x_0\n        # Integra\u00e7\u00e3o com m\u00e9todo odeint() da biblioteca scipy.integrate\n        self.x_ = odeint(self.modelo_aeropendulo, self.x_0, self.t)\n        self.plotar_graficos()\n\n    def simulacao_dinamica(self, t_simu: int = 100, ts: float = 0.1,\n                           x_0: List[float] = [0.1, -0.5]) -&gt; None:\n\"\"\"\n        M\u00e9todo que implementa uma simula\u00e7\u00e3o com integrta\u00e7\u00e3o usando o la\u00e7o for,\n        no final plota os gr\u00e1ficos dos estados do sistema para a dada\n        simula\u00e7\u00e3o.\n        Args:\n            t_simu: tempo de simula\u00e7\u00e3o, Padr\u00e3o: 100.\n            ts: Per\u00edodo de amostragem, Padr\u00e3o: 0.1\n            x_0: Condi\u00e7\u00f5es iniciais do sistema.\n        \"\"\"\n        self.simu_dinamic = True\n        self.t_simu = t_simu\n        self.ts = ts\n        self.t = ts*np.arange(0, t_simu+ts, ts)\n        self.x = x_0\n        for j, i in enumerate(self.t):\n            dx = self.modelo_aeropendulo(self.x, self.t)\n            try:\n                dt = (self.t[j+1]-i)\n            except Exception:\n                pass\n            self.x = self.x + dt * dx\n            self.x1[0].append(self.x[0])\n            self.x1[1].append(self.x[1])\n        self.plotar_graficos()\n\n    def plotar_graficos(self) -&gt; None:\n\"\"\"\n        M\u00e9todo para plotagem dos gr\u00e1ficos de simula\u00e7\u00e3o interna, para os m\u00e9todos\n        simular() e simulacao_dinamica(), plota os gr\u00e1ficos dos estados do\n        sistema, velocidade e posi\u00e7\u00e3o.\n        \"\"\"\n        plt.figure(figsize=(10, 7))\n        plt.suptitle(\"Gr\u00e1ficos dos estados do Aerop\u00eandulo\")\n\n        plt.subplot(211)\n        if self.simu:\n            plt.plot(self.t, self.x_[:, 0], lw=3.5)\n        if self.simu_dinamic:\n            plt.plot(self.t, self.x1[0])\n\n        plt.subplot(212)\n        if self.simu:\n            plt.plot(self.t, self.x_[:, 1], lw=2)\n        if self.simu_dinamic:\n            plt.plot(self.t, self.x1[1])\n        if self.simu or self.simu_dinamic:\n            plt.show()\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/modelo_mat_aeropendulo_reference/#labvirtual.simulador_aeropendulo.modelo_mat_aeropendulo.ModeloMatAeropendulo.set_u","title":"<code>set_u(u)</code>","text":"Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/modelo_mat_aeropendulo.py</code> <pre><code>def set_u(self, u):\n    self.u = u\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/modelo_mat_aeropendulo_reference/#labvirtual.simulador_aeropendulo.modelo_mat_aeropendulo.ModeloMatAeropendulo.modelo_aeropendulo","title":"<code>modelo_aeropendulo(x, t)</code>","text":"<p>M\u00e9todo que implementa o modelo matem\u00e1tico do aerop\u00eandulo.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>List[float] | Array1XN</code> <p>Estados atuais do sistema.</p> required <code>t</code> <code>float | Array1XN</code> <p>necess\u00e1rio caso use scipy.integrate.odeint</p> required <p>Returns:</p> Type Description <code>Array1XN</code> <p>Retorna um array numpy contendo a derivada dos estados.</p> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/modelo_mat_aeropendulo.py</code> <pre><code>def modelo_aeropendulo(self, x: List[float] | Array1XN,\n                       t: float | Array1XN) -&gt; Array1XN:\n\"\"\"\n    M\u00e9todo que implementa o modelo matem\u00e1tico do aerop\u00eandulo.\n    Args:\n        x: Estados atuais do sistema.\n        t: necess\u00e1rio caso use scipy.integrate.odeint\n    Returns:\n        Retorna um array numpy contendo a derivada dos estados.\n    \"\"\"\n    # Vari\u00e1veis de estado a partir do vetor de estados\n    x1, x2 = x\n\n    # Equa\u00e7\u00e3o de estado dx2 = f(x, u)\n    dx2 = x1\n\n    # Equa\u00e7\u00e3o de estado dx1 = f(x, u)\n    dx1 = (- x1*self.c - self.m*self.g*self.d*np.sin(x2) +\n           self.u*self.K_m) / (self.J)\n    dx = np.array([dx1, dx2])      # Derivada do vetor de estados\n    return dx                      # Retorna a derivada do vetor de estados\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/modelo_mat_aeropendulo_reference/#labvirtual.simulador_aeropendulo.modelo_mat_aeropendulo.ModeloMatAeropendulo.simular","title":"<code>simular(t_simu=100, ts=0.1, x_0=[0.1, -0.5])</code>","text":"<p>M\u00e9todo que implementa uma simula\u00e7\u00e3o com scipy.integrate.odeint, no final plota os gr\u00e1ficos dos estados do sistema para a dada simula\u00e7\u00e3o.</p> <p>Parameters:</p> Name Type Description Default <code>t_simu</code> <code>int</code> <p>tempo de simula\u00e7\u00e3o, Padr\u00e3o: 100.</p> <code>100</code> <code>ts</code> <code>float</code> <p>Per\u00edodo de amostragem, Padr\u00e3o: 0.1</p> <code>0.1</code> <code>x_0</code> <code>List[float]</code> <p>Condi\u00e7\u00f5es iniciais para simula\u00e7\u00e3o</p> <code>[0.1, -0.5]</code> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/modelo_mat_aeropendulo.py</code> <pre><code>def simular(self, t_simu: int = 100, ts: float = 0.1,\n            x_0: List[float] = [0.1, -0.5]) -&gt; None:\n\"\"\"\n    M\u00e9todo que implementa uma simula\u00e7\u00e3o com scipy.integrate.odeint,\n    no final plota os gr\u00e1ficos dos estados do sistema para a dada\n    simula\u00e7\u00e3o.\n    Args:\n        t_simu: tempo de simula\u00e7\u00e3o, Padr\u00e3o: 100.\n        ts: Per\u00edodo de amostragem, Padr\u00e3o: 0.1\n        x_0: Condi\u00e7\u00f5es iniciais para simula\u00e7\u00e3o\n    \"\"\"\n    self.simu = True\n    self.t_simu = t_simu\n    self.ts = ts\n    self.t = ts*np.arange(0, t_simu+ts, ts)\n    # Condi\u00e7\u00f5es iniciais\n    self.x_0 = x_0\n    # Integra\u00e7\u00e3o com m\u00e9todo odeint() da biblioteca scipy.integrate\n    self.x_ = odeint(self.modelo_aeropendulo, self.x_0, self.t)\n    self.plotar_graficos()\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/modelo_mat_aeropendulo_reference/#labvirtual.simulador_aeropendulo.modelo_mat_aeropendulo.ModeloMatAeropendulo.simulacao_dinamica","title":"<code>simulacao_dinamica(t_simu=100, ts=0.1, x_0=[0.1, -0.5])</code>","text":"<p>M\u00e9todo que implementa uma simula\u00e7\u00e3o com integrta\u00e7\u00e3o usando o la\u00e7o for, no final plota os gr\u00e1ficos dos estados do sistema para a dada simula\u00e7\u00e3o.</p> <p>Parameters:</p> Name Type Description Default <code>t_simu</code> <code>int</code> <p>tempo de simula\u00e7\u00e3o, Padr\u00e3o: 100.</p> <code>100</code> <code>ts</code> <code>float</code> <p>Per\u00edodo de amostragem, Padr\u00e3o: 0.1</p> <code>0.1</code> <code>x_0</code> <code>List[float]</code> <p>Condi\u00e7\u00f5es iniciais do sistema.</p> <code>[0.1, -0.5]</code> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/modelo_mat_aeropendulo.py</code> <pre><code>def simulacao_dinamica(self, t_simu: int = 100, ts: float = 0.1,\n                       x_0: List[float] = [0.1, -0.5]) -&gt; None:\n\"\"\"\n    M\u00e9todo que implementa uma simula\u00e7\u00e3o com integrta\u00e7\u00e3o usando o la\u00e7o for,\n    no final plota os gr\u00e1ficos dos estados do sistema para a dada\n    simula\u00e7\u00e3o.\n    Args:\n        t_simu: tempo de simula\u00e7\u00e3o, Padr\u00e3o: 100.\n        ts: Per\u00edodo de amostragem, Padr\u00e3o: 0.1\n        x_0: Condi\u00e7\u00f5es iniciais do sistema.\n    \"\"\"\n    self.simu_dinamic = True\n    self.t_simu = t_simu\n    self.ts = ts\n    self.t = ts*np.arange(0, t_simu+ts, ts)\n    self.x = x_0\n    for j, i in enumerate(self.t):\n        dx = self.modelo_aeropendulo(self.x, self.t)\n        try:\n            dt = (self.t[j+1]-i)\n        except Exception:\n            pass\n        self.x = self.x + dt * dx\n        self.x1[0].append(self.x[0])\n        self.x1[1].append(self.x[1])\n    self.plotar_graficos()\n</code></pre>"},{"location":"M%C3%B3dulos%20Interface%20Gr%C3%A2fica/modelo_mat_aeropendulo_reference/#labvirtual.simulador_aeropendulo.modelo_mat_aeropendulo.ModeloMatAeropendulo.plotar_graficos","title":"<code>plotar_graficos()</code>","text":"<p>M\u00e9todo para plotagem dos gr\u00e1ficos de simula\u00e7\u00e3o interna, para os m\u00e9todos simular() e simulacao_dinamica(), plota os gr\u00e1ficos dos estados do sistema, velocidade e posi\u00e7\u00e3o.</p> Source code in <code>/home/bits/.local/lib/python3.8/site-packages/labvirtual/simulador_aeropendulo/modelo_mat_aeropendulo.py</code> <pre><code>def plotar_graficos(self) -&gt; None:\n\"\"\"\n    M\u00e9todo para plotagem dos gr\u00e1ficos de simula\u00e7\u00e3o interna, para os m\u00e9todos\n    simular() e simulacao_dinamica(), plota os gr\u00e1ficos dos estados do\n    sistema, velocidade e posi\u00e7\u00e3o.\n    \"\"\"\n    plt.figure(figsize=(10, 7))\n    plt.suptitle(\"Gr\u00e1ficos dos estados do Aerop\u00eandulo\")\n\n    plt.subplot(211)\n    if self.simu:\n        plt.plot(self.t, self.x_[:, 0], lw=3.5)\n    if self.simu_dinamic:\n        plt.plot(self.t, self.x1[0])\n\n    plt.subplot(212)\n    if self.simu:\n        plt.plot(self.t, self.x_[:, 1], lw=2)\n    if self.simu_dinamic:\n        plt.plot(self.t, self.x1[1])\n    if self.simu or self.simu_dinamic:\n        plt.show()\n</code></pre>"}]}